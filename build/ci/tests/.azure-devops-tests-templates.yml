parameters:
  poolName: ''
  vmImageWindows: ''
  vmImageLinux: ''
  macOSImageName: ''

jobs:

- job: Dotnet_Template_Tests_NetCoreMobile_windows
  displayName: 'Windows Tests'
  timeoutInMinutes: 120
  cancelTimeoutInMinutes: 1

  pool: ${{ parameters.poolName }}

  strategy:
    matrix:
      group_1:
        TestGroup: '1'
      group_2:
        TestGroup: '2'
      group_3:
        TestGroup: '3'
      group_4:
        TestGroup: '4'

  variables:
    # don't validate transitive dependencies for template tests
    NuGetAuditMode: direct

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: 'Nuget_Packages'

  - template: ../templates/gitversion.yml
  - template: ../templates/dotnet-mobile-install-windows.yml
  - template: ../templates/uno-dev-feed.yml

  - script: copy $(System.ArtifactsDirectory)\Nuget_Packages\vslatest\*.nupkg $(Build.SourcesDirectory)\src\PackageCache
    displayName: Copy Artifacts to PackageCache

  - task: PowerShell@2
    displayName: Run Project Templates Tests
    inputs:
      targetType: 'inline'
      script: |
        build\test-scripts\run-netcore-mobile-template-tests.ps1 -TestGroup "$(TestGroup)"
      pwsh: true # Use PowerShell core (required for IsWindows to run)
    env:
      BUILD_SOURCESDIRECTORY: $(BUILD.SOURCESDIRECTORY)
      NBGV_SemVer2: $(NBGV_SemVer2)

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/src/SolutionTemplate/binlogs
      ArtifactName: template-tests-binlogs-windows
      ArtifactType: Container

- job: Dotnet_Template_Tests_NetCoreMobile_macos
  displayName: 'macOS Tests'
  timeoutInMinutes: 120
  cancelTimeoutInMinutes: 1

  pool:
    vmImage: ${{ parameters.macOSImageName }}

  strategy:
    matrix:
      group_1:
        TestGroup: '1'
      group_2:
        TestGroup: '2'
      group_3:
        TestGroup: '3'
      group_4:
        TestGroup: '4'

  variables:
    # don't validate transitive dependencies for template tests
    NuGetAuditMode: direct

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: 'Nuget_Packages'

  # Install android 34 as we're running on macos-15
  - bash: |
      echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME --install 'platforms;android-34' | tr '\r' '\n' | uniq
    displayName: Install Android 34

  - template: ../templates/gitversion.yml

  - template: ../templates/ios-build-select-version.yml
    parameters:
      xCodeRoot: ${{ parameters.xCodeRoot }}

  - template: ../templates/dotnet-mobile-install-mac.yml
  - template: ../templates/uno-dev-feed.yml

  - powershell: cp $(System.ArtifactsDirectory)/Nuget_Packages/vslatest/*.nupkg $(Build.SourcesDirectory)/src/PackageCache
    displayName: Copy Artifacts to PackageCache

  - bash: brew install ninja
    displayName: Install ninja build for WebAssembly Skia build

  - powershell: build/test-scripts/run-netcore-mobile-template-tests.ps1 -TestGroup "$(TestGroup)"
    displayName: Run Project Templates Tests
    env:
      BUILD_SOURCESDIRECTORY: $(BUILD.SOURCESDIRECTORY)
      NBGV_SemVer2: $(NBGV_SemVer2)

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/src/SolutionTemplate/binlogs
      ArtifactName: template-tests-binlogs-macos
      ArtifactType: Container

- job: Dotnet_Template_Tests_net7_Linux
  displayName: 'Linux Tests'

  pool: ${{ parameters.vmPoolLinux }}

  strategy:
    matrix:
      group_0:
        TestGroup: '0'
      group_1:
        TestGroup: '1'
      group_2:
        TestGroup: '2'
      group_3:
        TestGroup: '3'

  variables:
    # don't validate transitive dependencies for template tests
    NuGetAuditMode: direct

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: 'Nuget_Packages'

  - template: ../templates/gitversion.yml
  - template: ../templates/dotnet-mobile-install-linux.yml
  - template: ../templates/gitversion.yml
  - template: ../templates/uno-dev-feed.yml
  - template: ../templates/host-cleanup-linux.yml

  - script: cp $(System.ArtifactsDirectory)/Nuget_Packages/vslatest/*.nupkg $(Build.SourcesDirectory)/src/PackageCache
    displayName: Copy Artifacts to PackageCache

  - template: ../templates/dotnet-install.yml

  - bash: |
      set -x

      sudo snap install core24
      sudo snap install lxd
      sudo snap install multipass
      sudo snap install snapcraft --classic

      export PATH=$PATH:/snap/bin
      sudo chown root:root /
      sudo /snap/bin/lxd.migrate -yes
      sudo /snap/bin/lxd waitready
      sudo /snap/bin/lxd init --auto

      echo Adding $USER to group lxd
      sudo usermod --append --groups lxd $USER

      sudo apt install iptables
      sudo iptables -I DOCKER-USER -i lxdbr0 -j ACCEPT
      sudo iptables -I DOCKER-USER -o lxdbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    displayName: Setup Snapcraft

  - bash: |
      # required for net8 and the latest uno-check does not install it anymore
      sudo apt install ninja-build
    displayName: Setup Ninja

  - pwsh: build/test-scripts/run-net7-template-linux.ps1 -TestGroup "$(TestGroup)"
    displayName: Run Project Templates Tests
    env:
      BUILD_SOURCESDIRECTORY: $(BUILD.SOURCESDIRECTORY)
      NBGV_SemVer2: $(NBGV_SemVer2)

  - task: PublishBuildArtifacts@1
    retryCountOnTaskFailure: 3
    condition: always()
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/src/SolutionTemplate/binlogs
      ArtifactName: template-tests-binlogs-net7-linux
      ArtifactType: Container
