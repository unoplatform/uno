parameters:
  vmImage: ''
  vmMacImage: ''
  vmMacImageTest: ''
  vmLinuxImage: ''
  vmLinuxPool: ''
  xCodeRootTest: ''
  xCodeRootBuild: ''
  poolName: ''
  UNO_UWP_BUILD: ''
  XAML_FLAVOR_BUILD: ''

jobs:
##
## Windows
##

- job: Skia_Windows_Screenshot_Tests
  displayName: 'Run Skia Windows Snapshot Tests'
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 1

  pool:
    vmImage: ${{ parameters.vmImage }}

  condition: and(succeeded(), eq(variables['UNO_UWP_BUILD'], 'false'))

  variables:
    SamplesAppArtifactName: skia-generic-samples-app-WinUI
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

    UNO_UWP_BUILD: ${{ parameters.UNO_UWP_BUILD }}
    XAML_FLAVOR_BUILD: ${{ parameters.XAML_FLAVOR_BUILD }}

  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@2
    displayName: Downloading $(SamplesAppArtifactName)
    inputs:
      artifact: $(SamplesAppArtifactName)
      path: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

  - script: |
        cd $(SamplesAppArtifactPath)
        dotnet SamplesApp.Skia.Generic.dll --auto-screenshots=$(build.artifactstagingdirectory)/screenshots/skia-windows-screenshots

    displayName: Run Skia Windows Snapshot Tests

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uitests-results
      ArtifactType: Container

- job: Skia_Windows_Runtime_Tests_Build
  displayName: 'Run Skia Windows Runtime Tests'
  timeoutInMinutes: 60
  cancelTimeoutInMinutes: 1

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    SamplesAppArtifactName: skia-generic-samples-app-$(XAML_FLAVOR_BUILD)
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)
    UnoEnableHRuntimeTests: true

    UNO_UWP_BUILD: ${{ parameters.UNO_UWP_BUILD }}
    XAML_FLAVOR_BUILD: ${{ parameters.XAML_FLAVOR_BUILD }}

  steps:

  - task: DownloadPipelineArtifact@2
    displayName: Downloading $(SamplesAppArtifactName)
    inputs:
      artifact: $(SamplesAppArtifactName)
      path: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

  - task: DownloadBuildArtifacts@0
    condition: gt(variables['System.JobAttempt'], 1)
    continueOnError: true
    displayName: Download previous test runs failed tests
    inputs:
        artifactName: uitests-failure-results
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml

  - script: |
      # Build source generators for hot reload runtime tests
      # Used to build the hot reload test secondary app during runtime tests
      cd $(build.sourcesdirectory)/src/SourceGenerators/Uno.UI.Tasks
      dotnet build -c Debug
      cd $(build.sourcesdirectory)/src/SourceGenerators/Uno.UI.SourceGenerators
      dotnet build -c Debug
      cd $(build.sourcesdirectory)/src/Uno.UI.RemoteControl.Host
      dotnet build -c Debug
    displayName: Build HR dependencies

  - pwsh: build/test-scripts/run-windows-skia-runtime-tests.ps1
    displayName: Run Skia Windows $(XAML_FLAVOR_BUILD) Runtime Tests

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'Skia Windows $(XAML_FLAVOR_BUILD) Runtime Tests'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/skia-windows-runtime-tests-results.xml'
      failTaskOnFailedTests: true
      failTaskOnMissingResultsFile: true

  - task: PublishBuildArtifacts@1
    condition: always()
    displayName: Publish Failed Tests Results
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/build/uitests-failure-results
      ArtifactName: uitests-failure-results
      ArtifactType: Container

- job: Uno_Islands_Skia_Wpf_Runtime_Tests_Build
  displayName: 'Run Uno Islands Skia WPF Runtime Tests'
  timeoutInMinutes: 45
  cancelTimeoutInMinutes: 1
  condition: and(succeeded(), eq(variables['UNO_UWP_BUILD'], 'false'))
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    SamplesAppArtifactName: uno-islands-skia-wpf-samples-app-WinUI
    SamplesAppArtifactPath: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

    UNO_UWP_BUILD: ${{ parameters.UNO_UWP_BUILD }}
    XAML_FLAVOR_BUILD: ${{ parameters.XAML_FLAVOR_BUILD }}

  steps:

  - task: DownloadPipelineArtifact@2
    displayName: Downloading $(SamplesAppArtifactName)
    inputs:
      artifact: $(SamplesAppArtifactName)
      path: $(build.sourcesdirectory)/build/$(SamplesAppArtifactName)

  - task: DownloadBuildArtifacts@0
    condition: gt(variables['System.JobAttempt'], 1)
    continueOnError: true
    displayName: Download previous test runs failed tests
    inputs:
        artifactName: uitests-failure-results
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml

  - pwsh: build/test-scripts/run-windows-islands-skia-runtime-tests.ps1
    displayName: Run Uno Islands Skia WPF Runtime Tests

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'Uno Islands Skia WPF Runtime Tests'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/uno-islands-skia-wpf-runtime-tests-results.xml'
      failTaskOnFailedTests: true
      failTaskOnMissingResultsFile: true

  - task: PublishBuildArtifacts@1
    condition: always()
    displayName: Publish Failed Tests Results
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/build/uitests-failure-results
      ArtifactName: uitests-failure-results
      ArtifactType: Container
