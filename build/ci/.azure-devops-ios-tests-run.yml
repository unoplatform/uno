parameters:
  vmImage: ''
  xCodeRoot: ''
  JobName: ''
  JobTimeoutInMinutes: ''
  JobDisplayName: ''
  UITEST_SNAPSHOTS_ONLY: ''
  UITEST_SNAPSHOTS_GROUP: ''
  UITEST_ALLOW_RERUN: ''
  UITEST_VARIANT: ''
  SAMPLESAPP_BUNDLE_ID: ''
  nugetPackages: ''
  SamplesAppArtifactName: ''
  dependsOn: ''

jobs:
- job: ${{ parameters.JobName }}
  timeoutInMinutes: ${{ parameters.JobTimeoutInMinutes }}
  cancelTimeoutInMinutes: 1
  dependsOn: ${{ parameters.dependsOn }}
  displayName: ${{ parameters.JobDisplayName }}
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    CI_Build: true
    SourceLinkEnabled: false
    NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
    UITEST_ALLOW_RERUN: ${{ parameters.UITEST_ALLOW_RERUN }}
    
    UNO_UITEST_BUCKET_COUNT: 5

  steps:
  - checkout: self
    clean: true

  - task: DownloadPipelineArtifact@2
    displayName: Downloading iOS Samples App
    inputs:
      artifact: ${{ parameters.SamplesAppArtifactName }}
      path: $(build.sourcesdirectory)/build/${{ parameters.SamplesAppArtifactName }}

  - task: DownloadBuildArtifacts@0
    condition: gt(variables['System.JobAttempt'], 1)
    continueOnError: true
    displayName: Download previous test runs failed tests
    inputs:
        artifactName: uitests-failure-results
        downloadPath: '$(build.sourcesdirectory)/build'

  - template: templates/dotnet-install.yml

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - template: templates/ios-build-select-version.yml
    parameters:
      xCodeRoot: ${{ parameters.xCodeRoot }}

  - bash: |
      rm -f ${HOME}/Library/Preferences/Xamarin/Settings.plist
    # https://github.com/actions/virtual-environments/issues/1932
    displayName: Apply workaround for Azure Devops issue 1932

  - task: PowerShell@2
    displayName: 'Fill Rerun Variable'
    inputs:
      ## Expression evaluation for task parameters is not supported
      ## Invert UITEST_ALLOW_RERUN in a task
      targetType: inline
      script: |
        Set-PSDebug -Trace 1
        if( "${{ parameters.UITEST_ALLOW_RERUN }}" -eq "false") {
          $val = "true"
        } else {
          $val = "false"
        }
        echo "##vso[task.setvariable variable=FAIL_TESTS_ON_NO_RERUN]$val"

  ## First UI Tests run (https://github.com/unoplatform/uno/issues/6714)
  - bash: |
      $(build.sourcesdirectory)/build/test-scripts/ios-uitest-run.sh

    displayName: Run iOS Simulator Tests

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"
      UITEST_SNAPSHOTS_ONLY: "${{ parameters.UITEST_SNAPSHOTS_ONLY }}"
      UITEST_SNAPSHOTS_GROUP: "${{ parameters.UITEST_SNAPSHOTS_GROUP }}"
      UITEST_AUTOMATED_GROUP: "${{ parameters.UITEST_AUTOMATED_GROUP }}"
      UITEST_RUNTIME_TEST_GROUP: "${{ parameters.UITEST_RUNTIME_TEST_GROUP }}"
      UITEST_RUNTIME_TEST_GROUP_COUNT: "${{ parameters.UITEST_RUNTIME_TEST_GROUP_COUNT }}"
      UITEST_TEST_TIMEOUT: "${{ parameters.UITEST_TEST_TIMEOUT }}"
      UNO_UITEST_IOSBUNDLE_PATH: "$(build.sourcesdirectory)/build/${{ parameters.SamplesAppArtifactName }}/SamplesApp.app"
      SAMPLESAPP_BUNDLE_ID: "${{ parameters.SAMPLESAPP_BUNDLE_ID }}"

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'iOS Test Run ($(Agent.JobName))'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult-original.xml'

      # don't fail on failed tests, second run will do it
      # see https://github.com/unoplatform/uno/issues/6714
      failTaskOnFailedTests: $(FAIL_TESTS_ON_NO_RERUN)

  ## Second UI Tests run (https://github.com/unoplatform/uno/issues/6714)
  - bash: |
      $(build.sourcesdirectory)/build/test-scripts/ios-uitest-run.sh

    displayName: Run iOS Simulator Tests (re-run)
    condition: eq(variables.UITEST_ALLOW_RERUN, 'true')

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"
      UITEST_SNAPSHOTS_ONLY: "${{ parameters.UITEST_SNAPSHOTS_ONLY }}"
      UITEST_SNAPSHOTS_GROUP: "${{ parameters.UITEST_SNAPSHOTS_GROUP }}"
      UITEST_AUTOMATED_GROUP: "${{ parameters.UITEST_AUTOMATED_GROUP }}"
      UITEST_RUNTIME_TEST_GROUP: "${{ parameters.UITEST_RUNTIME_TEST_GROUP }}"
      UITEST_RUNTIME_TEST_GROUP_COUNT: "${{ parameters.UITEST_RUNTIME_TEST_GROUP_COUNT }}"
      UITEST_TEST_TIMEOUT: "${{ parameters.UITEST_TEST_TIMEOUT }}"
      UITEST_VARIANT: "${{ parameters.UITEST_VARIANT }}"
      UNO_UITEST_IOSBUNDLE_PATH: "$(build.sourcesdirectory)/build/ios-uitest-build/SamplesApp.app"
      SAMPLESAPP_BUNDLE_ID: "${{ parameters.SAMPLESAPP_BUNDLE_ID }}"

  - task: PublishTestResults@2
    condition: eq(variables.UITEST_ALLOW_RERUN, 'true')
    inputs:
      testRunTitle: 'iOS Test Run ($(Agent.JobName))'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult-original.xml'
      # Second run needs to fail tests
      # see https://github.com/unoplatform/uno/issues/6714
      failTaskOnFailedTests: true

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '$(build.sourcesdirectory)/build/RuntimeTestResults*.xml'
      testRunTitle: 'iOS Runtime Tests Run ($(Agent.JobName))'
      testResultsFormat: 'NUnit'
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uitests-results
      ArtifactType: Container

  # logs files are large, so we create them outside of `artifactstagingdirectory` and publish
  # them in a separate artifacts container.
  # This is needed so that screenshot comparison doesn't unnecessarily download large files, which slows it down.
  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/ios-ui-tests-logs
      ArtifactName: uitests-results-ios-logs
      ArtifactType: Container

  - task: PublishBuildArtifacts@1
    displayName: Publish Failed Tests Results List
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.sourcesdirectory)/build/uitests-failure-results
      ArtifactName: uitests-failure-results
      ArtifactType: Container
