parameters:
  vmImage: ''
  xCodeRootTest: ''
  xCodeRootBuild: ''

  # Align with SnapShotTestGenerator.GroupCount
  SNAPSHOT_GROUPS:
  - key: '00'
    value: '01'
  - key: '01'
    value: '02'
  - key: '02'
    value: '03'
  - key: '03'
    value: '04'
  - key: '04'
    value: '05'

  # Runtime Test Groups
  UITEST_RUNTIME_TEST_GROUP_COUNT: 8
  RUNTIME_TESTS_GROUPS:
  - key: '0'
    value: '01'
  - key: '1'
    value: '02'
  - key: '2'
    value: '03'
  - key: '3'
    value: '04'
  - key: '4'
    value: '05'
  - key: '5'
    value: '06'
  - key: '6'
    value: '07'
  - key: '7'
    value: '08'

  # Automated Test Groups
  AUTOMATED_TESTS_GROUPS:
  - key: '1'
    value: '01'
  - key: '2'
    value: '02'
  - key: '3'
    value: '03'
  - key: '4'
    value: '04'

jobs:
- job: iOS_Build
  displayName: 'Build iOS Samples App UI Tests'

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    CI_Build: true
    SourceLinkEnabled: falses
    NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

  steps:
  - checkout: self
    clean: true

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - template: templates/dotnet-mobile-install-mac.yml
    parameters:
      UnoCheckParameters: '--tfm net9.0-ios'

  - template: templates/ios-build-select-version.yml
    parameters:
      xCodeRoot: ${{ parameters.xCodeRootBuild }}

  - template: templates/gitversion.yml

  - bash: |
      $(build.sourcesdirectory)/build/test-scripts/ios-uitest-build.sh

    displayName: Build iOS App for UI Tests

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"

  - task: CopyFiles@2
    inputs:
      SourceFolder: $(build.sourcesdirectory)/src/SamplesApp/SamplesApp.netcoremobile/bin/Release/net8.0-ios/iossimulator-x64/SamplesApp.app
      Contents: '**'
      TargetFolder: $(build.artifactstagingdirectory)/bin/SamplesApp.app
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - task: PublishPipelineArtifact@1
    displayName: 'Publish iOS Binaries'
    retryCountOnTaskFailure: 3
    inputs:
      targetPath: $(build.artifactstagingdirectory)/bin
      ArtifactName: ios-uitest-build

  - task: PublishBuildArtifacts@1
    displayName: 'Publish iOS build logs'
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)/logs
      ArtifactName: ios-uitest-build-logs
      ArtifactType: Container

- job: iOS_TestFlight
  displayName: 'Build iOS Samples App - TestFlight'
  # condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/master')

  strategy:
    matrix:
      Native:
        _BuildFolder: '$(BUILD.SOURCESDIRECTORY)/src/SamplesApp/SamplesApp.netcoremobile'
        _ArtifactName: 'ios-testflight'
        _VariantName: 'Native'

      Skia:
        _BuildFolder: '$(BUILD.SOURCESDIRECTORY)/src/SamplesApp/SamplesApp.Skia.netcoremobile'
        _ArtifactName: 'ios-skia-testflight'
        _VariantName: 'Skia'

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    - group: unoplatform.apple.ios.appstore.distribution
    - name: CI_Build
      value: true
    - name: SourceLinkEnabled
      value: false
    - name: NUGET_PACKAGES
      value: $(Pipeline.Workspace)/.nuget/packages

  steps:
  - checkout: self
    clean: true

  - task: InstallAppleCertificate@2
    displayName: Install Certificate
    inputs:
      certSecureFile: UnoPlatform-Apple-Distribution.p12
      certPwd: $(appleappstorecertificatepassword)
      keychain: temp

  - task: InstallAppleProvisioningProfile@1
    displayName: Install Provisioning Profile
    inputs:
      provisioningProfileLocation: secureFiles
      provProfileSecureFile: 'Uno_Dev_Samples.mobileprovision'

  - task: InstallAppleProvisioningProfile@1
    displayName: Install Provisioning Profile
    inputs:
      provisioningProfileLocation: secureFiles
      provProfileSecureFile: 'Uno_Dev_Samples_Skia.mobileprovision'

  - template: templates/nuget-cache.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)

  - template: templates/dotnet-mobile-install-mac.yml
    parameters:
      UnoCheckParameters: '--tfm net9.0-ios'

  - template: templates/ios-build-select-version.yml
    parameters:
      xCodeRoot: ${{ parameters.xCodeRootBuild }}

  - template: templates/gitversion.yml

  - bash: |
      cd $(_BuildFolder)
      dotnet publish \
        -f net9.0-ios \
        -c Release \
        -p:BuildForTestFlight=true \
        -p:UnoTargetFrameworkOverride=net9.0-ios \
        /bl:$(build.artifactstagingdirectory)/ios-netcoremobile-sampleapp-testflight.binlog

    displayName: Build iOS App for TestFlight

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      AGENT_TEMPDIRECTORY: "$(Agent.TempDirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"

  - task: CopyFiles@2
    inputs:
      SourceFolder: $(_BuildFolder)/bin/Release/net9.0-ios/ios-arm64/publish
      Contents: '**'
      TargetFolder: $(build.artifactstagingdirectory)/TestFlight
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - task: PublishBuildArtifacts@1
    condition: always()
    retryCountOnTaskFailure: 3
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: $(_ArtifactName)
      ArtifactType: Container

##
## Automated tests
##
- ${{ each AutomatedTestGroup in parameters.AUTOMATED_TESTS_GROUPS }}:
  - template: .azure-devops-ios-tests-run.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)
      JobName: 'iOS_Automated_Tests_Group_${{ AutomatedTestGroup.value }}'
      JobDisplayName: 'iOS Automated Tests ${{ AutomatedTestGroup.value }}'
      JobTimeoutInMinutes: 120
      SamplesAppArtifactName: 'ios-uitest-build'
      vmImage: ${{ parameters.vmImageTest }}
      UITEST_SNAPSHOTS_ONLY: false
      UITEST_AUTOMATED_GROUP: ${{ AutomatedTestGroup.key }}
      UITEST_TEST_TIMEOUT: '20m'
      UITEST_ALLOW_RERUN: 'true'
      SAMPLESAPP_BUNDLE_ID: 'uno.platform.samplesdev'
      xCodeRoot: ${{ parameters.xCodeRootTest }}
      dependsOn:
        - iOS_Build

##
## Runtime tests
##
- ${{ each RuntimeTestGroup in parameters.RUNTIME_TESTS_GROUPS }}:
  - template: .azure-devops-ios-tests-run.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)
      JobName: 'iOS_Automated_Tests_Runtime_Tests_group_${{ RuntimeTestGroup.value }}'
      JobDisplayName: 'iOS Runtime Tests ${{ RuntimeTestGroup.value }}'
      JobTimeoutInMinutes: 120
      SamplesAppArtifactName: 'ios-uitest-build'
      vmImage: ${{ parameters.vmImageTest }}
      UITEST_SNAPSHOTS_ONLY: false
      UITEST_TEST_TIMEOUT: '90m'
      UITEST_AUTOMATED_GROUP: RuntimeTests
      UITEST_RUNTIME_TEST_GROUP: ${{ RuntimeTestGroup.key }}
      UITEST_RUNTIME_TEST_GROUP_COUNT: ${{ parameters.UITEST_RUNTIME_TEST_GROUP_COUNT }}
      UITEST_ALLOW_RERUN: 'false'
      SAMPLESAPP_BUNDLE_ID: 'uno.platform.samplesdev'
      xCodeRoot: ${{ parameters.xCodeRootTest }}
      dependsOn:
        - iOS_Build

# Disabled for benchmkarks timeout
# - template: .azure-devops-ios-tests-run.yml
#   parameters:
#     nugetPackages: $(NUGET_PACKAGES)
#     JobName: 'iOS_Automated_Tests_Benchmarks'
#     JobDisplayName: 'iOS Automated Benchmarks'
#     JobTimeoutInMinutes: 40
#     vmImage: ${{ parameters.vmImageTest }}
#     UITEST_SNAPSHOTS_ONLY: false
#     UITEST_AUTOMATED_GROUP: Benchmarks
#     SAMPLESAPP_BUNDLE_ID: 'uno.platform.samplesdev'
#     xCodeRoot: ${{ parameters.xCodeRootTest }}

- ${{ each snapshotGroup in parameters.SNAPSHOT_GROUPS }}:
  - template: .azure-devops-ios-tests-run.yml
    parameters:
      nugetPackages: $(NUGET_PACKAGES)
      JobName: 'iOS_Snapshot_Tests_Group_${{ snapshotGroup.value }}'
      JobDisplayName: 'iOS Snapshot Tests ${{ snapshotGroup.value }}'
      JobTimeoutInMinutes: 60
      SamplesAppArtifactName: 'ios-uitest-build'
      vmImage: ${{ parameters.vmImageTest }}
      UITEST_SNAPSHOTS_ONLY: true
      UITEST_SNAPSHOTS_GROUP: ${{ snapshotGroup.key }}
      UITEST_TEST_TIMEOUT: '10m'
      UITEST_ALLOW_RERUN: 'false'
      SAMPLESAPP_BUNDLE_ID: 'uno.platform.samplesdev'
      xCodeRoot: ${{ parameters.xCodeRootTest }}
      dependsOn:
        - iOS_Build
