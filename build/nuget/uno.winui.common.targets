<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<SourceGeneratorBasePath Condition="'$(SourceGeneratorBasePath)'==''">.\</SourceGeneratorBasePath>
		<UnoUIMSBuildTasksTargetPath Condition="'$(UnoUIMSBuildTasksTargetPath)'==''"></UnoUIMSBuildTasksTargetPath>

		<_IsUnoPlatform>true</_IsUnoPlatform>
	</PropertyGroup>

	<!-- Feature configuration -->
	<PropertyGroup>
		<UnoDragDropExternalSupport Condition="'$(UnoDragDropExternalSupport)'==''">true</UnoDragDropExternalSupport>
		<UnoEnableDynamicDataTemplateUpdate Condition="'$(UnoEnableDynamicDataTemplateUpdate)'=='' AND '$(Optimize)' == 'true'">false</UnoEnableDynamicDataTemplateUpdate>
		<UnoEnableDynamicDataTemplateUpdate Condition="'$(UnoEnableDynamicDataTemplateUpdate)'=='' AND '$(Optimize)' != 'true'">true</UnoEnableDynamicDataTemplateUpdate>
	</PropertyGroup>
	<ItemGroup>
		
		<RuntimeHostConfigurationOption Include="Windows.ApplicationModel.DataTransfer.DragDrop.ExternalSupport"
										Value="$(UnoDragDropExternalSupport)"
										Trim="true" />

		<RuntimeHostConfigurationOption Include="Uno.UI.EnableDynamicDataTemplateUpdate"
										Value="$(UnoEnableDynamicDataTemplateUpdate)"
										Trim="true" />
	</ItemGroup>

	<Target Name="ValidateUnoUIAndUnoWinUIExclusion" BeforeTargets="BeforeBuild">
		<Error Code="UNOB0001"
			   HelpLink="https://aka.platform.uno/UNOB0001"
			   Text="Cannot build with both Uno.WinUI and Uno.UI nuget packages referenced. https://aka.platform.uno/UNOB0001"
			   Condition="'$(PkgUno_UI)'!='' and '$(PkgUno_WinUI)'!=''" />
	</Target>

	<!--
	Include a marker for _FindInvalidWinAppSDKUnoPlatformReference to determine if a net7.0-only project is referenced
	from a WinAppSDK project.
	-->
	<Target Name="_UnoUpdateAdditionalProperties" BeforeTargets="GetTargetFrameworksWithPlatformForSingleTargetFramework">
		<ItemGroup>
			<AdditionalTargetFrameworkInfoProperty Include="_IsUnoPlatform" />
		</ItemGroup>
	</Target>
	
	<Import Project="$(SourceGeneratorBasePath)Uno.UI.SourceGenerators.props" />
	<Import Project="$(UnoUIMSBuildTasksTargetPath)Uno.UI.Tasks.targets" />

	<Target Name="_UnoWinUICommonFeatureDefines" AfterTargets="PrepareForBuild">

		<!-- 
			Defines Uno features. 
		
			Note to contributors: Adding a feature here allows for smoother upgrade 
			to a more recent version of uno. These constants are defined in the code 
			that uses Uno, so conditional compilation can be used to detect the presence
			of breaking changes.
		-->
		<PropertyGroup>
			<DefineConstants>$(DefineConstants);HAS_UNO;__UNO__</DefineConstants>
			<DefineConstants Condition="$(_IsUnoWinUIPackage)">$(DefineConstants);HAS_UNO_WINUI;__UNO_WINUI__;WINUI_WINDOWING</DefineConstants>
			<DefineConstants>$(DefineConstants);UNO_HAS_FRAMEWORKELEMENT_MEASUREOVERRIDE</DefineConstants>
			<DefineConstants>$(DefineConstants);UNO_HAS_NO_IDEPENDENCYOBJECT</DefineConstants>
		</PropertyGroup>

		<!-- Note: This might need to be adjusted when we have netX.0-browser -->
		<PropertyGroup Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == ''">
			<DefineConstants>$(DefineConstants);UNO_REFERENCE_API</DefineConstants>
		</PropertyGroup>

	</Target>

	<Target Name="ReplaceRefAssemblies" AfterTargets="_ResolveAssemblies" Condition="'$(AndroidApplication)'=='true'">
		<!-- This is a workaround for https://github.com/xamarin/xamarin-android/issues/1162#issuecomment-359475008 -->
		<ItemGroup>
			<ResolvedAssembliesFixedWindows Include="@(ResolvedAssemblies->Replace('\ref\','\lib\'))" />
			<ResolvedAssembliesFixedUnix Include="@(ResolvedAssemblies->Replace('/ref/','/lib/'))" />
			<ResolvedAssembliesFixed Include="@(ResolvedAssembliesFixedWindows)" Condition="@(ResolvedAssembliesFixedWindows) != @(ResolvedAssemblies)" />
			<ResolvedAssembliesFixed Include="@(ResolvedAssembliesFixedUnix)" Condition="@(ResolvedAssembliesFixedUnix) != @(ResolvedAssemblies)" />
			<ResolvedAssemblies Condition="'@(ResolvedAssembliesFixed->Count())' &gt; 0" Remove="@(ResolvedAssemblies)" />
			<ResolvedAssemblies Include="@(ResolvedAssembliesFixed)" />
		</ItemGroup>
	</Target>

	<!-- List of packages that provide an uno-runtime folder -->
	<ItemGroup>
		<UnoRuntimeEnabledPackage Include="Uno.UI" PackageBasePath="$(MSBuildThisFileDirectory).." Condition="!$(_IsUnoWinUIPackage)" />
		<UnoRuntimeEnabledPackage Include="Uno.WinUI" PackageBasePath="$(MSBuildThisFileDirectory).." Condition="$(_IsUnoWinUIPackage)" />
	</ItemGroup>

	<!--
  Cross-runtime libraries creation targets
  -->
	<Target Name="PrepareUnoRuntimeProjectReferences" BeforeTargets="BeforeBuild">

		<!--
	Build the ProjectReference item group for UnoRuntimeProjectReference items.
	The references are added as non-referencing ProjectReferences to enable the inclusion
	of their output in the final nuget package.
	-->
		<ItemGroup>
			<ProjectReference Include="%(UnoRuntimeProjectReference.Identity)">
				<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
				<SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
				<UndefineProperties>TargetFramework</UndefineProperties>
			</ProjectReference>
		</ItemGroup>

	</Target>

	<Target Name="ResolvePrepareUnoRuntimeProjectReferences" AfterTargets="ResolveProjectReferences">

		<!-- Execute UnoRuntimeGetTargetPath for all UnoRuntimeProjectReference to get their actual output -->
		<MSBuild
			Projects="@(UnoRuntimeProjectReference)"
			Targets="UnoRuntimeGetTargetPath"
			BuildInParallel="$(BuildInParallel)"
			Properties="Configuration=$(Configuration);Platform=$(Platform);TargetFramework=$(TargetFramework)"
			ContinueOnError="!$(BuildingProject)">

			<Output TaskParameter="TargetOutputs" ItemName="UnoRuntimeProjectReferenceOutput" />
		</MSBuild>

		<ItemGroup>
			<!-- Add the appropriate metadata to include those files -->
			<UnoRuntimeProjectReferenceOutput Update="@(UnoRuntimeProjectReferenceOutput)">
				<Pack>true</Pack>
				<PackagePath>uno-runtime/%(UnoRuntimeIdentifier)</PackagePath>
			</UnoRuntimeProjectReferenceOutput>

			<!-- Include symbols as well, if available -->
			<UnoRuntimeProjectReferenceOutput
				Include="@(UnoRuntimeProjectReferenceOutput->'%(rootdir)%(directory)%(filename).pdb')"
				Condition="exists('%(rootdir)%(directory)%(filename).pdb')">
				<Pack>true</Pack>
				<PackagePath>uno-runtime/%(UnoRuntimeIdentifier)</PackagePath>
			</UnoRuntimeProjectReferenceOutput>

		</ItemGroup>

		<ItemGroup>
			<TfmSpecificPackageFile Include="@(UnoRuntimeProjectReferenceOutput)" />
		</ItemGroup>

		<RemoveDuplicates Inputs="@(TfmSpecificPackageFile)">
			<Output TaskParameter="Filtered" ItemName="FilteredUnoRuntimeProjectReferenceOutput" />
		</RemoveDuplicates>

		<ItemGroup>
			<TfmSpecificPackageFile Remove="@(TfmSpecificPackageFile)" />
			<TfmSpecificPackageFile Include="@(FilteredUnoRuntimeProjectReferenceOutput)" />
		</ItemGroup>
	</Target>

	<!-- Target used to determine the outputs of a project alongs with its associated UnoRuntimeIdentifier -->
	<Target
	  Name="UnoRuntimeGetTargetPath"
	  DependsOnTargets="GetTargetPath"
	  Returns="@(UnoRuntimeTargetPathWithTargetPlatformMoniker)">

		<ItemGroup>
			<UnoRuntimeTargetPathWithTargetPlatformMoniker
				Include="@(TargetPathWithTargetPlatformMoniker)"
				UnoRuntimeIdentifier="$(UnoRuntimeIdentifier.ToLower())" />
		</ItemGroup>

	</Target>


	<!--
	  Target used to warn the developer that overriden package binaries have been placed in the nuget cache.
	  -->
	<Target Name="_UnoNotifyNugetOverride" BeforeTargets="PrepareProjectReferences">
		<ItemGroup>
			<!--
      If System.Collections* files are present, the package may have been overriden by an Uno.UI solution
      version before the introduction of this check.
      -->
			<_OverrideFiles Include="$(MSBuildThisFileDirectory)../tools/System.Collections*.dll"/>
		</ItemGroup>
		<PropertyGroup>
			<_warnForUnoOverride>false</_warnForUnoOverride>
			<_warnForUnoOverride Condition="'@(_OverrideFiles)'!='' or exists('$(MSBuildThisFileDirectory)../.packageoverride')">true</_warnForUnoOverride>
		</PropertyGroup>
		<Warning Condition="$(_warnForUnoOverride)"
             Text="======================================"
             ContinueOnError="true" />
		<Warning Condition="$(_warnForUnoOverride)"
             Text="The Uno.UI nuget package has been overriden and may use modified files.&#x0d;&#x0a;Clear this package version folder in the nuget cache to return to a stable state."
             ContinueOnError="true" />
		<Warning Condition="$(_warnForUnoOverride)"
             Text="======================================"
             ContinueOnError="true" />
	</Target>

	<!-- Workaround for OmniSharp single-TargetFramework use -->
	<PropertyGroup Condition="'$(UnoForceSingleTFM)' == 'true'">
		<TargetFrameworks></TargetFrameworks>
	</PropertyGroup>
  
	<Target Name="CleanupMarkupPass1" BeforeTargets="MarkupCompilePass1" Condition="'$(UseWPF)'=='true'">
		<!--
		Remove Uno files when building for WPF, and move those files to the
		UnoPage and UnoApplicationDefinition to avoid conflicts with the WPF ones.
		-->
		<ItemGroup>
			<UnoPage Include="@(Page)" Condition="%(Page.XamlRuntime)=='WinUI'" />
			<UnoApplicationDefinition Include="@(ApplicationDefinition)" Condition="%(ApplicationDefinition.XamlRuntime)=='WinUI'" />

			<Page Remove="@(Page)" Condition="%(Page.XamlRuntime)=='WinUI'" />
			<ApplicationDefinition Remove="@(ApplicationDefinition)" Condition="%(ApplicationDefinition.XamlRuntime)=='WinUI'" />
		</ItemGroup>
	</Target>
	
</Project>
