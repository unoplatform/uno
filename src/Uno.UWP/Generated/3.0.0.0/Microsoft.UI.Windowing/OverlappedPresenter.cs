// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Windowing
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class OverlappedPresenter : global::Microsoft.UI.Windowing.AppWindowPresenter
	{
		// Skipping already declared property IsResizable
		// Skipping already declared property IsModal
		// Skipping already declared property IsMinimizable
		// Skipping already declared property IsMaximizable
		// Skipping already declared property IsAlwaysOnTop
		// Skipping already declared property HasBorder
		// Skipping already declared property HasTitleBar
		// Skipping already declared property State
#if false
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "__TVOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__")]
		public int? PreferredMinimumWidth
		{
			get
			{
				throw new global::System.NotImplementedException("The member int? OverlappedPresenter.PreferredMinimumWidth is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%3F%20OverlappedPresenter.PreferredMinimumWidth");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "int? OverlappedPresenter.PreferredMinimumWidth");
			}
		}
#endif
#if false
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "__TVOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__")]
		public int? PreferredMinimumHeight
		{
			get
			{
				throw new global::System.NotImplementedException("The member int? OverlappedPresenter.PreferredMinimumHeight is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%3F%20OverlappedPresenter.PreferredMinimumHeight");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "int? OverlappedPresenter.PreferredMinimumHeight");
			}
		}
#endif
#if false
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "__TVOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__")]
		public int? PreferredMaximumWidth
		{
			get
			{
				throw new global::System.NotImplementedException("The member int? OverlappedPresenter.PreferredMaximumWidth is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%3F%20OverlappedPresenter.PreferredMaximumWidth");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "int? OverlappedPresenter.PreferredMaximumWidth");
			}
		}
#endif
#if false
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "__TVOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__")]
		public int? PreferredMaximumHeight
		{
			get
			{
				throw new global::System.NotImplementedException("The member int? OverlappedPresenter.PreferredMaximumHeight is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=int%3F%20OverlappedPresenter.PreferredMaximumHeight");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "int? OverlappedPresenter.PreferredMaximumHeight");
			}
		}
#endif
		// Skipping already declared property RequestedStartupState
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMaximizable.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.HasTitleBar.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsAlwaysOnTop.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsAlwaysOnTop.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMaximizable.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMinimumHeight.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMinimizable.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMinimizable.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsModal.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsModal.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsResizable.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsResizable.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.State.get
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.Maximize()
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.Minimize()
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.Restore()
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.SetBorderAndTitleBar(bool, bool)
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.Minimize(bool)
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.Restore(bool)
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.HasBorder.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMinimumHeight.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMinimumWidth.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMinimumWidth.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMaximumWidth.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMaximumWidth.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMaximumHeight.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.PreferredMaximumHeight.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.RequestedStartupState.get
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.Create()
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.CreateForContextMenu()
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.CreateForDialog()
		// Skipping already declared method Microsoft.UI.Windowing.OverlappedPresenter.CreateForToolWindow()
	}
}
