<Project>
	<PropertyGroup>
		<IsBrowserWasm>true</IsBrowserWasm>
		<UsingUnoCommonWasmTargets>true</UsingUnoCommonWasmTargets>

		<EnableDefaultWasmItems Condition="$(EnableDefaultWasmItems) == ''">false</EnableDefaultWasmItems>

		<!-- Enable the netx.0-browserwasm target -->
		<TargetPlatformIdentifier>BrowserWasm</TargetPlatformIdentifier>
		<TargetFrameworkIdentifier>BrowserWasm</TargetFrameworkIdentifier>
		<TargetPlatformSupported>true</TargetPlatformSupported>
		<TargetPlatformVersion>1.0</TargetPlatformVersion>
		<SupportedOSPlatformVersion Condition=" '$(SupportedOSPlatformVersion)' == '' ">1.0</SupportedOSPlatformVersion>

		<OutputType Condition=" $(OutputType) == 'Exe' AND $(OutputType) != $(_InitialOutputType)">$([MSBuild]::ValueOrDefault('$(_InitialOutputType)', 'Library'))</OutputType>

		<!-- Disable assets generation for libraries -->
		<StaticWebAssetsEnabled Condition=" $(OutputType) != 'Exe' ">false</StaticWebAssetsEnabled>

		<WasmShellEnableIDBFS Condition=" '$(WasmShellEnableIDBFS)' == '' AND $(UnoFeatures.Contains(';skiarenderer;'))">true</WasmShellEnableIDBFS>

		<!-- Workaround for https://github.com/dotnet/runtime/pull/109866 -->
		<IsBrowserWasmProject Condition=" $(OutputType) != 'Exe' ">false</IsBrowserWasmProject>

		<IsMSALSupported>true</IsMSALSupported>

		<!-- net10.0 validation of CA1418 is case sensitive -->
		<NoWarn>$(NoWarn);CA1418</NoWarn>
	</PropertyGroup>

	<PropertyGroup>
		<_RequiresILLinkPack>true</_RequiresILLinkPack>
	</PropertyGroup>

	<!-- Enable the netx.0-browserwasm target -->
	<ItemGroup>
		<SupportedPlatform Remove="@(SupportedPlatform)" />
		<SupportedPlatform Include="browserwasm" />

		<!-- net10.0 validation of CA1418 is case sensitive -->
		<SupportedPlatform Include="BrowserWasm" />
		<SdkSupportedTargetPlatformVersion Include="$(TargetPlatformVersion)" />
	</ItemGroup>

	<!-- Enable the netx.0-browserwasm target -->
	<ItemGroup Condition=" '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '8.0')) ">
		<SdkSupportedTargetPlatformIdentifier Include="browserwasm" DisplayName="BrowserWasm" />
	</ItemGroup>

	<!-- 
		Duplicate backwards compatibility with:
		https://github.com/unoplatform/Uno.Wasm.Bootstrap/blob/f0cb358c25d3048680c8dd3d15e455aa5d13b532/src/Uno.Wasm.Bootstrap/build/Uno.Wasm.Bootstrap.targets#L59

		This is required because the evaluation of props/targets files from the SDK discards imports of
		the AOT compiler if RunAOTCompilation is not set ahead of time, and the bootstrapper cannot set
		that propery if it's not an SDK.
	 -->
	<PropertyGroup Condition=" '$(WasmShellMonoRuntimeExecutionMode)' == 'InterpreterAndAOT' AND '$(WasmShellGenerateAOTProfile)' != 'true' ">
		<RunAOTCompilation>true</RunAOTCompilation>
		<WasmBuildNative>true</WasmBuildNative>
	</PropertyGroup>

	<Target Name="_UnoRemoveWebSdkConfigContent"
			Condition=" '$(UnoDisableRemoveWebSdkConfigContent)' != 'true' "
			BeforeTargets="BeforeBuild;CheckForDuplicateItems">
		<ItemGroup>
			<!-- 
			Prevent .json and .config files from being included and conflict 
			with other target framework `Content` items handling.

			See https://github.com/dotnet/sdk/blob/e3c62139dd25af2b7593a2cde702261f20822e47/src/StaticWebAssetsSdk/Sdk/Sdk.StaticWebAssets.StaticAssets.ProjectSystem.props#L36
				-->

			<!-- Get all files included by the Web Sdk, except ones from the Assets folder -->
			<_ContentToUpdate
				Include="@(Content)"
				IsWebSdk="true"
				Exclude="$(AssetsFolder)**"
				Condition="'%(Content.DefiningProjectDirectory)'!='' AND $([System.String]::Copy(%(Content.DefiningProjectDirectory)).Contains('Microsoft.NET.Sdk.StaticWebAssets'))" />

			<!-- Get all files included by everything else, except ones from the Assets folder -->
			<_NonWebSdkContent
				Include="@(Content)"
				Exclude="$(AssetsFolder)**"
				Condition="'%(Content.DefiningProjectDirectory)'!='' AND !$([System.String]::Copy(%(Content.DefiningProjectDirectory)).Contains('Microsoft.NET.Sdk.StaticWebAssets'))" />

			<!-- Remove the files Web SDK included files. This will also remove duplicates, regardless of the metadata -->
			<Content Remove="@(_ContentToUpdate)"
					 Condition="'%(_ContentToUpdate.IsWebSdk)'=='true' AND '%(_ContentToUpdate.IsDefaultItem)'!='true'" />

			<!-- Add back the non-websdk content -->
			<Content Include="@(_NonWebSdkContent)" KeepDuplicates="false" />

			<!-- Cleanup -->
			<_ContentToUpdate Remove="@(_ContentToUpdate)"/>
			<_NonWebSdkContent Remove="@(_NonWebSdkContent)"/>

		</ItemGroup>
	</Target>

	<Target Name="_UnoAdjustWwwrootContent"
			BeforeTargets="AssignTargetPaths">

		<ItemGroup>
			<_wwwRootContentToUpdate Include="$(MSBuildProjectDirectory)/$(WasmProjectFolder)/wwwroot/**" />

			<Content Remove="@(_wwwRootContentToUpdate)" />

			<Content Include="@(_wwwRootContentToUpdate)">
				<Link>%(RecursiveDir)%(Filename)%(Extension)</Link>
				<UnoDeploy>Root</UnoDeploy>
				<!-- net9+ compatibility -->
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			</Content>

			<_wwwRootContentToUpdate Remove="@(_wwwRootContentToUpdate)" />
		</ItemGroup>
	</Target>

	<Target Name="_UnoFilterWebSdkGlobalUsings"
			Condition=" '$(Optimize)' == 'true' AND '$(UnoDisableFilterWebSdkGlobalUsings)' != 'true' "
			BeforeTargets="BeforeBuild">
		<ItemGroup>
			<!-- 
			Remove all the usings included by the Microsoft.NET.Sdk.Web SDK. Note that 
			`DefiningProjectDirectory` is not available when used from a global itemgroup, but is 
			available from an target.
			-->
			<_RemoveWebSDKUsing Include="@(Using)" Condition="'%(Using.DefiningProjectDirectory)'!='' AND $([System.String]::Copy(%(Using.DefiningProjectDirectory)).Contains('Microsoft.NET.Sdk.Web'))" />
			<Using Remove="@(_RemoveWebSDKUsing)" />
			<_RemoveWebSDKUsing Remove="@(_RemoveWebSDKUsing)"/>
		</ItemGroup>
	</Target>

	<Target Name="_UnoGenerateGlobalUsingsMock"
			BeforeTargets="CoreCompile"
			DependsOnTargets="_UnoFilterWebSdkGlobalUsings"
			Condition=" '$(Optimize)' != 'true' AND '$(UnoDisableGenerateGlobalUsingsMock)'!='true' ">
		<!-- 
			This target is present to work around global usings that provided by the .NET Web SDK
			that we cannot remove reliably, particular during Hot Reload. 
			As a workaround we generate a temporary file that contains the namespaces and private 
			types that will make global using namespaces valid at compile time.
		-->

		<PropertyGroup>
			<_FakeGlobalUsingsFile>$(IntermediateOutputPath)/FakeGlobalUsings.g.cs</_FakeGlobalUsingsFile>
			<_FakeGlobalUsingsAssemblyName>$(AssemblyName.Replace('.','_'))</_FakeGlobalUsingsAssemblyName>
		</PropertyGroup>

		<ItemGroup>
			<_UsingsDedup Include="%(Using.Identity)" KeepDuplicates="false" />
			<_GlobalUsingMocksLines Include="@(_UsingsDedup->'namespace %(Identity) { class __HotReloadWorkaround__$(_FakeGlobalUsingsAssemblyName) { } }')" />
		</ItemGroup>

		<WriteLinesToFile File="$(_FakeGlobalUsingsFile)" Lines="@(_GlobalUsingMocksLines)" WriteOnlyWhenDifferent="true" Overwrite="true" />

		<ItemGroup>
			<Compile Include="$(_FakeGlobalUsingsFile)" Visible="False" />
			<FileWrites Include="$(_FakeGlobalUsingsFile)" />

			<_GlobalUsingMocksLines Remove="@(_GlobalUsingMocksLines)" />
			<_UsingsDedup Remove="@(_UsingsDedup)" />
		</ItemGroup>
	</Target>


	<Import Project="$(MSBuildThisFileDirectory)..\targets\Uno.SingleProject.Wasm.targets"
			Condition=" $(_IsUnoSingleProjectAndLegacy) == 'true' " />
</Project>
