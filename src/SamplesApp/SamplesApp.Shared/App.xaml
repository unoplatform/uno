<Application x:Class="SamplesApp.App"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:not_win="http://uno.ui/not_win"
			 xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:ios="http://nventive.com/ios"
			 xmlns:local="using:SamplesApp"
			 xmlns:toolkit="using:Uno.UI.Toolkit"
			 xmlns:uc="using:Uno.UI.Controls"
			 mc:Ignorable="ios not_win">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.ThemeDictionaries>
				<!-- GlobalThemeResource_Test01 used in ResourceMarkupTest_Setup -->
				
				<ResourceDictionary x:Key="HighContrast">
					<SolidColorBrush x:Key="GlobalThemeResource_Test01" Color="Red" />
				</ResourceDictionary>
				<ResourceDictionary x:Key="Default">
					<SolidColorBrush x:Key="GlobalThemeResource_Test01" Color="Gray" />
					<x:String x:Key="GlobalThemeResource_TestText">global App.Resources-default</x:String>
				</ResourceDictionary>
				<ResourceDictionary x:Key="Dark">
					<SolidColorBrush x:Key="GlobalThemeResource_Test01" Color="Blue" />
					<x:String x:Key="GlobalThemeResource_TestText">global App.Resources-dark</x:String>
				</ResourceDictionary>
				<ResourceDictionary x:Key="Light">
					<SolidColorBrush x:Key="GlobalThemeResource_Test01" Color="Yellow" />
					<x:String x:Key="GlobalThemeResource_TestText">global App.Resources-light</x:String>
				</ResourceDictionary>
			</ResourceDictionary.ThemeDictionaries>

			<ResourceDictionary.MergedDictionaries>
				<win:XamlControlsResources xmlns="using:Microsoft.UI.Xaml.Controls" />
				<ResourceDictionary Source="Windows_UI_Xaml_Controls\ListView\MeasureDetectorControl\MeasureDetectorControl.xaml" />
				<MapResources xmlns="using:Uno.UI.Maps"/>
			</ResourceDictionary.MergedDictionaries>

			 <local:StringToStyleDictionary x:Key="MyResource">
                <Style x:Key="MyStyle" TargetType="Button">

                </Style>
            </local:StringToStyleDictionary>

			<SolidColorBrush x:Key="GlobalStaticResource_Test01"
							 Color="Purple" />

			<SolidColorBrush x:Key="GlobalStatEventRegistrationToken icResource_Test01"
							 Color="Purple" />

			<!--  ReSharper disable once InconsistentNaming  -->
			<SolidColorBrush x:Key="Pink_From_App_Xaml_Resources"
							 Color="#FF54BA" />

			<Style x:Key="Style_Bold_From_App_Xaml_Resources"
				   TargetType="TextBlock">
				<Setter Property="FontWeight"
						Value="ExtraBold" />
			</Style>

			<Style x:Key="Style_Pink_From_App_Xaml_Resources"
				   BasedOn="{StaticResource Style_Bold_From_App_Xaml_Resources}"
				   TargetType="TextBlock">
				<Setter Property="Foreground"
						Value="{StaticResource Pink_From_App_Xaml_Resources}" />
			</Style>

			<Style x:Key="CustomTextBox"
				   TargetType="TextBox">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="TextBox">
							<Grid>
								<Grid.Resources>
									<Style x:Key="TestStyle"
										   TargetType="Button">
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="Button">
													<Grid>
														<TextBlock Text="Sample" />
													</Grid>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</Grid.Resources>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!--  WinUI Styles  -->
			<Style x:Key="StandardGroupHeader"
				   TargetType="TextBlock">
				<Setter Property="FontSize"
						Value="22" />
				<Setter Property="Margin"
						Value="0,0,0,8" />
				<Setter Property="AutomationProperties.HeadingLevel"
						Value="Level2" />
			</Style>

			<Style x:Key="StandardGroupingStackPanel"
				   TargetType="StackPanel">
				<Setter Property="BorderBrush"
						Value="{ThemeResource SystemChromeGrayColor}" />
				<Setter Property="BorderThickness"
						Value="1" />
				<Setter Property="Padding"
						Value="8" />
			</Style>

			<!--Used by ContentDialog samples-->
			<Style x:Key="RedBorderContentDialogStyle"
				   TargetType="ContentDialog">
				<Setter Property="BorderBrush"
						Value="Red" />
			</Style>
			<Style x:Key="ContentDialogCloseButtonStyle"
				   TargetType="Button">
				<Setter Property="Foreground"
						Value="DarkBlue" />
				<Setter Property="Background"
						Value="LightBlue" />
			</Style>

			<Style x:Key="DefaultCommandBarStyle"
					TargetType="CommandBar">

				 <!--Remove the back button title (and only leave the back arrow)--> 
				<ios:Setter Property="(toolkit:CommandBarExtensions.BackButtonTitle)"
							Value="" />
			</Style>

			<Style x:Key="CustomIconCommandBarStyle"
					TargetType="CommandBar">

				 <!--Remove the back button title (and only leave the back arrow)--> 
				<ios:Setter Property="(toolkit:CommandBarExtensions.BackButtonTitle)"
							Value="" />

				<ios:Setter Property="(toolkit:CommandBarExtensions.BackButtonIcon)">
					<ios:Setter.Value>
						<BitmapIcon Foreground="Transparent"
									ShowAsMonochrome="False"
									Height="41"
									Width="41"
									UriSource="ms-appx:///Assets/BackArrow.png" />
					</ios:Setter.Value>
				</ios:Setter>
			</Style>

			<!--
				These value should be the same Image as the ones used
				for the CustomIconCommandBarStyle.BackButtonIcon
			-->
			<Style x:Key="ImageForCommandBarIcon"
					TargetType="Image">
				<ios:Setter Property="Source"
							Value="ms-appx:///Assets/BackArrow.png" />
				<ios:Setter Property="Height"
							Value="41" />
				<ios:Setter Property="Width"
							Value="41" />
			</Style>

			<!-- used by ResourceMarkupTest_Setup -->
			<x:String x:Key="GlobalStaticResource_TestText">global App.Resources</x:String>

			<!-- 
			Duplicate the fluent button style to remove the default animation
			that breaks screenshot tests.
			-->
			<not_win:Style TargetType="Button">
				<Setter Property="Background"
						Value="{ThemeResource ButtonBackground}" />
				<Setter Property="BackgroundSizing"
						Value="InnerBorderEdge" />
				<Setter Property="Foreground"
						Value="{ThemeResource ButtonForeground}" />
				<Setter Property="BorderBrush"
						Value="{ThemeResource ButtonBorderBrush}" />
				<Setter Property="BorderThickness"
						Value="{ThemeResource ButtonBorderThemeThickness}" />
				<Setter Property="Padding"
						Value="{StaticResource ButtonPadding}" />
				<Setter Property="HorizontalAlignment"
						Value="Left" />
				<Setter Property="VerticalAlignment"
						Value="Center" />
				<Setter Property="FontFamily"
						Value="{ThemeResource ContentControlThemeFontFamily}" />
				<Setter Property="FontWeight"
						Value="Normal" />
				<Setter Property="FontSize"
						Value="{ThemeResource ControlContentThemeFontSize}" />
				<Setter Property="UseSystemFocusVisuals"
						Value="{StaticResource UseSystemFocusVisuals}" />
				<Setter Property="FocusVisualMargin"
						Value="-3" />
				<Setter Property="CornerRadius"
						Value="{ThemeResource ControlCornerRadius}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="Button">
							<!-- Uno specific (LinearGradientBrush borders): Additional Grid as template root needed #6457 -->
							<Grid>
								<ContentPresenter x:Name="ContentPresenter"
												  Background="{TemplateBinding Background}"
												  Foreground="{TemplateBinding Foreground}"
												  BackgroundSizing="{TemplateBinding BackgroundSizing}"
												  BorderBrush="{TemplateBinding BorderBrush}"
												  BorderThickness="{TemplateBinding BorderThickness}"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}"
												  ContentTransitions="{TemplateBinding ContentTransitions}"
												  CornerRadius="{TemplateBinding CornerRadius}"
												  Padding="{TemplateBinding Padding}"
												  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
												  AutomationProperties.AccessibilityView="Raw"
												  local:AnimatedIcon.State="Normal"
												  xmlns:local="using:Microsoft.UI.Xaml.Controls">
								</ContentPresenter>
								<!-- Uno specific (LinearGradientBrush borders): #6457 -->
								<uc:FauxGradientBorderPresenter
										RequestedBorderBrush="{Binding ElementName=ContentPresenter, Path=BorderBrush}"
																RequestedBorderThickness="{Binding ElementName=ContentPresenter, Path=BorderThickness}"
																RequestedCornerRadius="{Binding ElementName=ContentPresenter, Path=CornerRadius}" />
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal" />
										<VisualState x:Name="PointerOver">
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonBackgroundPointerOver}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="BorderBrush">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonBorderBrushPointerOver}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonForegroundPointerOver}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
											<VisualState.Setters>
												<Setter Target="ContentPresenter.(controls:AnimatedIcon.State)"
														Value="PointerOver" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="Pressed">
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonBackgroundPressed}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="BorderBrush">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonBorderBrushPressed}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonForegroundPressed}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
											<VisualState.Setters>
												<Setter Target="ContentPresenter.(controls:AnimatedIcon.State)"
														Value="Pressed" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="Disabled">
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonBackgroundDisabled}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="BorderBrush">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonBorderBrushDisabled}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																			   Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0"
																			Value="{ThemeResource ButtonForegroundDisabled}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
											<VisualState.Setters>
												<!-- DisabledVisual Should be handled by the control, not the animated icon. -->
												<Setter Target="ContentPresenter.(controls:AnimatedIcon.State)"
														Value="Normal" />
											</VisualState.Setters>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</not_win:Style>


		</ResourceDictionary>

	</Application.Resources>
</Application>
