<ResourceDictionary x:Class="Uno.UI.RuntimeTests.Tests.Windows_UI_Xaml_Controls.TestsResources"
					xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:local="using:Uno.UI.RuntimeTests.Tests.Windows_UI_Xaml_Controls"
					xmlns:mux="using:Microsoft.UI.Xaml.Controls"
					xmlns:not_win="http://uno.ui/not_win"
					xmlns:ios="http://nventive.com/ios"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					mc:Ignorable="d not_win ios">
	<Style x:Key="BasicListViewContainerStyle"
		   TargetType="ListViewItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<ContentPresenter Content="{TemplateBinding Content}"
									  ContentTemplate="{TemplateBinding ContentTemplate}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="NoExtraSpaceListViewContainerStyle"
		   TargetType="ListViewItem">
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="MinWidth"
				Value="0" />
		<Setter Property="MinHeight"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<ContentPresenter Content="{TemplateBinding Content}"
									  ContentTemplate="{TemplateBinding ContentTemplate}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CounterItemsControlContainerStyle"
		   TargetType="ContentControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContentControl">
					<local:CounterGrid2>
						<ContentPresenter Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}" />
					</local:CounterGrid2>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="CounterComboBoxContainerStyle"
		   TargetType="ComboBoxItem">
		<Setter Property="Padding"
				Value="0" />
		<Setter Property="MinWidth"
				Value="0" />
		<Setter Property="MinHeight"
				Value="55" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBoxItem">
					<local:CounterGrid2>
						<ContentPresenter Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}" />
					</local:CounterGrid2>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ComboBoxItemContainerStyle"
			   TargetType="SelectorItem">
		<Setter Property="Background"
					Value="Red" />
		<Setter Property="TabNavigation"
					Value="Local" />
		<Setter Property="Padding"
					Value="12,14,12,13" />
		<Setter Property="HorizontalContentAlignment"
					Value="Center" />
		<Setter Property="Foreground"
					Value="Blue" />
		<Setter Property="UseSystemFocusVisuals"
					Value="True" />
		<Setter Property="FontSize"
					Value="16" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="SelectorItem">
					<Border x:Name="LayoutRoot"
								Background="{TemplateBinding Background}"
								Control.IsTemplateFocusTarget="True">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal">
									<Storyboard>

									</Storyboard>
								</VisualState>
								<VisualState x:Name="PointerOver">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Red" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Grey" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Black" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Selected">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot"
																		   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Purple" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Black" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedUnfocused">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot"
																		   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Transparent" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Blue" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedDisabled">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot"
																		   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Grey" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Grey" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedPointerOver">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot"
																		   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Blue" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Red" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedPressed">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot"
																		   Storyboard.TargetProperty="Background">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Blue" />
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter"
																		   Storyboard.TargetProperty="Foreground">
											<DiscreteObjectKeyFrame KeyTime="0"
																	Value="Red" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ContentPresenter x:Name="ContentPresenter"
											  Content="{TemplateBinding Content}"
											  ContentTransitions="{TemplateBinding ContentTransitions}"
											  ContentTemplate="{TemplateBinding ContentTemplate}"
											  Foreground="{TemplateBinding Foreground}"
											  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											  Margin="{TemplateBinding Padding}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<DataTemplate x:Key="TextBlockItemTemplate">
		<TextBlock Text="{Binding}" />
	</DataTemplate>
	<DataTemplate x:Key="WrappingTextBlockItemTemplate">
		<TextBlock Text="{Binding}" TextWrapping="Wrap" />
	</DataTemplate>
	<DataTemplate x:Key="SelfHostingItemTemplate">
		<ListViewItem Name="SelfHostingListViewItem">
			<Border x:Name="SelfHostingBorder">
				<TextBlock Text="{Binding}" />
			</Border>
		</ListViewItem>
	</DataTemplate>
	<ItemsPanelTemplate x:Key="NoCacheItemsStackPanel">
		<ItemsStackPanel CacheLength="0" />
	</ItemsPanelTemplate>
	<ItemsPanelTemplate x:Key="MeasureCountCarouselPanel">
		<local:MeasureCountCarouselPanel />
	</ItemsPanelTemplate>
	<ItemsPanelTemplate x:Key="NonVirtualizingItemsPanel">
		<StackPanel />
	</ItemsPanelTemplate>
	<Style x:Key="ListViewContainerMarginStyle"
		   TargetType="ListViewItem"
		   BasedOn="{StaticResource BasicListViewContainerStyle}">
		<Setter Property="Margin"
				Value="14,6,22,9" />
		<Setter Property="MinHeight"
				Value="1" />
	</Style>
	<DataTemplate x:Key="FixedSizeItemTemplate">
		<Border Width="152"
				Height="29"
				Background="LightSeaGreen">
			<TextBlock Text="{Binding}"
					   HorizontalAlignment="Center" />
		</Border>
	</DataTemplate>
	<DataTemplate x:Key="DefaultItemTemplate">
		<Border Width="152"
				Background="LightSeaGreen">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>
				<TextBlock Text="{Binding Name}"
						   Grid.Row="0"
						   HorizontalAlignment="Center" />
				<TextBlock Text="{Binding Value}"
						   Grid.Row="1"
						   HorizontalAlignment="Center" />
			</Grid>
		</Border>
	</DataTemplate>	
	<DataTemplate x:Key="CounterItemTemplate">
		<local:CounterGrid>
			<TextBlock Text="{Binding}" />
		</local:CounterGrid>
	</DataTemplate>
	<DataTemplate x:Key="ReuseCounterItemTemplate">
		<local:ReuseCountGrid>
			<TextBlock Text="{Binding}" />
		</local:ReuseCountGrid>
	</DataTemplate>
	<DataTemplate x:Key="SelectableItemTemplateA">
		<TextBlock x:Name="TextBlockInTemplate"
				   Text="Selectable A" />
	</DataTemplate>
	<DataTemplate x:Key="SelectableItemTemplateB">
		<TextBlock x:Name="TextBlockInTemplate"
				   Text="Selectable B" />
	</DataTemplate>
	<DataTemplate x:Key="SelectableItemTemplateC">
		<TextBlock x:Name="TextBlockInTemplate"
				   Text="Selectable C" />
	</DataTemplate>
	<DataTemplate x:Key="DataContextBindingDataTemplate">
		<Grid DataContext="{Binding SignIn}">
			<TextBlock Text="{Binding UserName}" />
		</Grid>
	</DataTemplate>

	<DataTemplate x:Key="ContentControlComboTemplate">
		<ComboBox DisplayMemberPath="DisplayName"
				  ItemsSource="{Binding Items}"
				  SelectedIndex="{Binding SelectedIndex, Mode=TwoWay}" />
	</DataTemplate>

	<Style x:Key="ScrollViewerCrowdedTemplateStyle"
		   TargetType="ScrollViewer">
		<Setter Property="HorizontalScrollBarVisibility"
				Value="Auto" />
		<Setter Property="HorizontalScrollMode"
				Value="Enabled" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ScrollViewer">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<RepeatButton x:Name="ScrollDecreaseButton"
									  VerticalAlignment="Bottom"
									  Width="29"
									  Height="29"
									  Delay="50"
									  FontFamily="{ThemeResource SymbolThemeFontFamily}"
									  Interval="100"
									  Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
									  Content="&#xE76B;" />
						<ScrollContentPresenter x:Name="ScrollContentPresenter"
												Grid.Column="1" />
						<RepeatButton x:Name="ScrollIncreaseButton"
									  Grid.Column="2"
									  VerticalAlignment="Bottom"
									  Width="29"
									  Height="29"
									  Delay="50"
									  FontFamily="{ThemeResource SymbolThemeFontFamily}"
									  Interval="100"
									  Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
									  Content="&#xE76C;" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<DataTemplate x:Key="PivotHeaderTemplate">
		<TextBlock Text="{Binding Title}" />
	</DataTemplate>

	<DataTemplate x:Key="PivotItemTemplate">
		<TextBlock Text="{Binding Content}" />
	</DataTemplate>

	<DataTemplate x:Key="TreeViewItemTemplate">
		<mux:TreeViewItem Content="{Binding Path=Label}"
						  IsExpanded="{Binding Path=IsExpanded, Mode=TwoWay}"
						  IsSelected="{Binding Path=IsSelected, Mode=TwoWay}"
						  ItemsSource="{Binding Path=Items}"
						  HorizontalContentAlignment="Left"
						  VerticalContentAlignment="Center" />
	</DataTemplate>
	<DataTemplate x:Key="TreeViewItemTemplate_WithoutIsSelectedBinding">
		<mux:TreeViewItem Content="{Binding Path=Label}"
						  IsExpanded="{Binding Path=IsExpanded, Mode=TwoWay}"
						  ItemsSource="{Binding Path=Items}"
						  HorizontalContentAlignment="Left"
						  VerticalContentAlignment="Center" />
	</DataTemplate>

	<DataTemplate x:Key="When_Item_Changes_Measure_Count_Template">
		<local:CounterGrid MinWidth="120"
						   Height="30"
						   BorderBrush="DimGray"
						   BorderThickness="1"
						   CornerRadius="3">
			<TextBlock Margin="3"
					   Text="{Binding Label}"
					   HorizontalAlignment="Left"
					   VerticalAlignment="Center" />
			<Border x:Name="BadgeView"
					Width="{Binding BadgeWidth}"
					Height="20"
					Margin="3"
					HorizontalAlignment="Right"
					VerticalAlignment="Center"
					CornerRadius="10"
					Background="DodgerBlue" />
		</local:CounterGrid>
	</DataTemplate>
	<DataTemplate x:Key="NV286_Template">
		<Border x:Name="ItemBorder"
				Width="130"
				BorderBrush="Brown"
				BorderThickness="1"
				CornerRadius="4">
			<TextBlock Text="{Binding}"
					   HorizontalAlignment="Center" />
		</Border>
	</DataTemplate>

	<DataTemplate x:Key="When_Available_Breadth_Changes_Template">
		<Border x:Name="ContainerBorder">
			<TextBlock x:Name="ContentTextBlock"
					   Text="{Binding}"
					   TextWrapping="Wrap" />
		</Border>
	</DataTemplate>

	<DataTemplate x:Name="RedSelectableTemplate">
		<Border Background="Red"
				BorderBrush="DarkRed"
				BorderThickness="2"
				CornerRadius="5"
				Height="95"
				MinWidth="100">
			<local:CounterGrid>
				<TextBlock Text="{Binding DisplayString}" />
			</local:CounterGrid>
		</Border>
	</DataTemplate>
	<DataTemplate x:Name="GreenSelectableTemplate">
		<Border Background="Green"
				BorderBrush="DarkGreen"
				BorderThickness="2"
				CornerRadius="5"
				Height="125"
				MinWidth="100">
			<local:CounterGrid>
				<TextBlock Text="{Binding DisplayString}" />
			</local:CounterGrid>
		</Border>
	</DataTemplate>
	<DataTemplate x:Name="BeigeSelectableTemplate">
		<Border Background="Beige"
				BorderBrush="SaddleBrown"
				BorderThickness="2"
				CornerRadius="5"
				Height="54"
				MinWidth="100">
			<local:CounterGrid>
				<TextBlock Text="{Binding DisplayString}" />
			</local:CounterGrid>
		</Border>
	</DataTemplate>

	<DataTemplate x:Key="SelectableBoundTemplateA">
		<Border BorderBrush="Green"
				BorderThickness="2"
				CornerRadius="5">
			<TextBlock Text="{Binding}" />
		</Border>
	</DataTemplate>
	<DataTemplate x:Key="SelectableBoundTemplateB">
		<Border BorderBrush="Red"
				BorderThickness="2"
				CornerRadius="5">
			<TextBlock Text="{Binding}" />
		</Border>
	</DataTemplate>

	<DataTemplate x:Key="BoundHeightItemTemplate">
		<Border x:Name="ItemBorder"
				MinWidth="130"
				Height="{Binding ItemHeight}"
				BorderBrush="Brown"
				BorderThickness="1"
				CornerRadius="4">
			<TextBlock x:Name="DisplayStringTextBlock"
					   Text="{Binding DisplayString}"
					   HorizontalAlignment="Center" />
		</Border>
	</DataTemplate>

	<Style x:Key="MyGridViewItemStyle"
               TargetType="GridViewItem">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="TabNavigation" Value="Local" />
		<Setter Property="IsHoldingEnabled" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="GridViewItem">
					<Grid x:Name="ContentBorder">
						<Rectangle x:Name="BorderRectangle"
                                       Width="100"
                                       Height="100"
                                       IsHitTestVisible="False"
                                       Fill="Green"
                                       Stroke="Red"
                                       StrokeThickness="2" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Material TextBox -->

	<x:String x:Key="ClearGlyphPathData">M10.661012,7.5689991L7.5990001,10.650999 12.939089,15.997999 7.5990001,21.336999 10.661012,24.405 16.007082,19.065 21.369997,24.405 24.430058,21.336999 24.429081,21.336 19.088991,15.998999 24.429081,10.662001 21.345095,7.5819996 16.007082,12.919001z M15.997072,0C24.828983,0 31.994999,7.1770013 31.994999,15.999998 31.994999,24.826997 24.828007,31.999999 15.997072,31.999999 7.1569835,31.999999 1.5270052E-07,24.826997 0,15.999998 1.5270052E-07,7.1799997 7.1569835,0 15.997072,0z</x:String>

	<Style x:Name="DeleteButtonStyle"
		   TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid x:Name="ButtonLayoutGrid"
						  Background="Transparent">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ButtonLayoutGrid.Opacity"
												Value="0" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Path x:Name="GlyphElement"
							  Data="{StaticResource ClearGlyphPathData}"
							  Fill="{StaticResource TextBoxIconColorBrush}"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center"
							  Stretch="Uniform"
							  Width="16"
							  Height="16"
							  AutomationProperties.AccessibilityView="Raw" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="MaterialOutlinedTextBoxStyle"
		   TargetType="TextBox">
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="#000000" />
		<Setter Property="PlaceholderForeground"
				Value="#DEFFFFFF" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="BorderBrush"
				Value="#DEFFFFFF" />
		<Setter Property="CornerRadius"
				Value="4" />

		<Setter Property="HorizontalContentAlignment"
				Value="Left" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="12,16" />
		<Setter Property="MinHeight"
				Value="50" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Grid x:Name="Root"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  CornerRadius="{TemplateBinding CornerRadius}"
						  Padding="{TemplateBinding Padding}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed" />

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Root.BorderBrush"
												Value="#000000" />

										<!-- Important: There is a Test validating this value -->
										<Setter Target="ContentElement.Foreground"
												Value="#0000FF" />
										<!-- In this case the opacity is not applied to the brush -->
										<Setter Target="ContentElement.Opacity"
												Value="0.38" />
										<Setter Target="PlaceholderElement.Foreground"
												Value="#000000" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="Root.BorderBrush"
												Value="#5B4CF5" />
										<Setter Target="PlaceholderElement.Foreground"
												Value="#5B4CF5" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ButtonStates">
								<VisualState x:Name="ButtonVisible">
									<VisualState.Setters>
										<Setter Target="DeleteButton.Visibility"
												Value="Visible" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="ButtonCollapsed" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="HeaderStates">
								<VisualState x:Name="NotEmpty">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="0:0:0.25"
														 To="-11" >
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseInOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>

										<!-- ContentElement TranslateY value changing depending if there is a PlaceholderText or not -->
										<DoubleAnimation Storyboard.TargetName="ContentElement_CompositeTransform"
														 Storyboard.TargetProperty="TranslateY"
														 Duration="0:0:0.25">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseInOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>

										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleX"
														 Duration="0:0:0.25"
														 To="0.7">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseInOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>

										<DoubleAnimation Storyboard.TargetName="PlaceholderElement_CompositeTransform"
														 Storyboard.TargetProperty="ScaleY"
														 Duration="0:0:0.25"
														 To="0.7" >
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseInOut" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<ContentPresenter x:Name="IconPresenter"
										  HorizontalAlignment="Center"
										  MaxHeight="34"
										  MaxWidth="34"
										  MinWidth="25"
										  Margin="0,0,8,0"
										  VerticalAlignment="Bottom"
										  Visibility="Visible" />

						<ScrollViewer x:Name="ContentElement"
									  Grid.Column="1"
									  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
									  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
									  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
									  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
									  IsTabStop="False"
									  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
									  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
									  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
									  VerticalAlignment="Bottom"
									  ZoomMode="Disabled"
									  AutomationProperties.AccessibilityView="Raw">
							<ScrollViewer.RenderTransform>
								<CompositeTransform x:Name="ContentElement_CompositeTransform" />
							</ScrollViewer.RenderTransform>
						</ScrollViewer>

						<TextBlock x:Name="PlaceholderElement"
								   Grid.Column="1"
								   Foreground="{Binding PlaceholderForeground, RelativeSource={RelativeSource TemplatedParent}}"
								   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								   IsHitTestVisible="False"
								   RenderTransformOrigin="0,0.5"
								   Text="{TemplateBinding PlaceholderText}"
								   TextAlignment="{TemplateBinding TextAlignment}"
								   TextWrapping="{TemplateBinding TextWrapping}"
								   VerticalAlignment="Top">
							<TextBlock.RenderTransform>
								<CompositeTransform x:Name="PlaceholderElement_CompositeTransform" />
							</TextBlock.RenderTransform>
						</TextBlock>

						<Button x:Name="DeleteButton"
								Grid.Column="2"
								Foreground="{TemplateBinding BorderBrush}"
								IsTabStop="False"
								Style="{StaticResource DeleteButtonStyle}"
								VerticalAlignment="Bottom"
								Visibility="Collapsed"
								AutomationProperties.AccessibilityView="Raw" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FocusableListViewItemStyle" TargetType="ListViewItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Border
                          x:Name="Border"
                          Margin="{TemplateBinding Margin}"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          CornerRadius="{TemplateBinding CornerRadius}">
						<ContentPresenter
                              x:Name="ContentPresenter"
                              Padding="{TemplateBinding Padding}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              ContentTransitions="{TemplateBinding ContentTransitions}"
                              FontFamily="{TemplateBinding FontFamily}"
                              FontSize="{TemplateBinding FontSize}"
                              FontWeight="{TemplateBinding FontWeight}"
                              Foreground="{TemplateBinding Foreground}" />

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="Border.Opacity" Value="0.56" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOver">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Foreground" Value="#00809B" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOverSelected">
									<VisualState.Setters>
										<Setter Target="Border.Background" Value="#E4F1F4" />
										<Setter Target="ContentPresenter.Foreground" Value="#00809B" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PointerOverPressed">
									<VisualState.Setters>
										<Setter Target="Border.Background" Value="#E4F1F4" />
										<Setter Target="ContentPresenter.Foreground" Value="#00809B" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Pressed">
									<VisualState.Setters>
										<Setter Target="Border.Background" Value="#E4F1F4" />
										<Setter Target="ContentPresenter.Foreground" Value="#00809B" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="PressedSelected">
									<VisualState.Setters>
										<Setter Target="Border.Background" Value="#E4F1F4" />
										<Setter Target="ContentPresenter.Foreground" Value="#00809B" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Selected">
									<VisualState.Setters>
										<Setter Target="Border.Background" Value="#E4F1F4" />
										<Setter Target="ContentPresenter.Foreground" Value="#00809B" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Foreground" Value="#00809B" />
									</VisualState.Setters>
								</VisualState>
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBox -->

	<Style x:Key="ComboBoxWithSeparatorStyle"
			   TargetType="ComboBox"
			   BasedOn="{StaticResource DefaultComboBoxStyle}">
		<Setter Property="BorderBrush"
					Value="{StaticResource SeparatorBrush}" />
		<Setter Property="BorderThickness"
					Value="0,0,0,1" />
		<Setter Property="Margin"
					Value="60,0" />
	</Style>

	<Style x:Key="DefaultComboBoxItemStyle"
			   TargetType="ComboBoxItem">
		<Setter Property="Background"
					Value="Transparent" />
		<Setter Property="VerticalContentAlignment"
					Value="Center" />
		<Setter Property="HorizontalContentAlignment"
					Value="Stretch" />
		<Setter Property="Padding"
					Value="0" />
		<Setter Property="Height"
					Value="48" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBoxItem">
					<Grid x:Name="RootGrid"
							  Background="{TemplateBinding Background}">

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />

								<VisualState x:Name="PointerOver">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PressedOverlay"
															 Storyboard.TargetProperty="Opacity"
															 Duration="{StaticResource MaterialAnimationDuration}"
															 To="1">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Pressed">
									<ios:VisualState.Setters>
										<Setter Target="PressedOverlay.Opacity"
													Value="0.9" />
									</ios:VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Opacity"
													Value="1" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="Selected">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Foreground"
													Value="{StaticResource MaterialPrimaryBrush}" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="SelectedPointerOver">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Foreground"
													Value="{StaticResource MaterialPrimaryBrush}" />
									</VisualState.Setters>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PressedOverlay"
															 Storyboard.TargetProperty="Opacity"
															 Duration="{StaticResource MaterialAnimationDuration}"
															 To="1">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="SelectedDisabled">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Foreground"
													Value="{StaticResource MaterialPrimaryBrush}" />
										<Setter Target="ContentPresenter.Opacity"
													Value="1" />
									</VisualState.Setters>
								</VisualState>

								<VisualState x:Name="SelectedPressed">
									<VisualState.Setters>
										<Setter Target="ContentPresenter.Foreground"
													Value="{StaticResource MaterialPrimaryBrush}" />
									</VisualState.Setters>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PressedOverlay"
															 Storyboard.TargetProperty="Opacity"
															 Duration="{StaticResource MaterialAnimationDuration}"
															 To="0.9">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<!-- Pressed Overlay -->
						<Grid x:Name="PressedOverlay"
								  Background="{StaticResource ComboBoxSelectedBackgroundThemeBrush}"
								  BorderBrush="{StaticResource ComboBoxBorderBrush}"
								  BorderThickness="0,1,0,1"
								  IsHitTestVisible="False"
								  VerticalAlignment="Stretch"
								  HorizontalAlignment="Stretch"
								  Opacity="0" />

						<!-- ContentPresenter-->
						<ContentPresenter x:Name="ContentPresenter"
											  Foreground="{StaticResource MaterialOnSurfaceBrush}"
											  ContentTransitions="{TemplateBinding ContentTransitions}"
											  Content="{TemplateBinding Content}"
											  ContentTemplate="{TemplateBinding ContentTemplate}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DefaultComboBoxStyle"
			   TargetType="ComboBox">
		<Setter Property="Background"
					Value="Transparent" />
		<Setter Property="Foreground"
					Value="{StaticResource MaterialOnBackgroundBrush}" />
		<Setter Property="BorderThickness"
					Value="0" />
		<Setter Property="Padding"
					Value="0" />
		<Setter Property="MinHeight"
					Value="48" />
		<Setter Property="TabNavigation"
					Value="Once" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
					Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility"
					Value="Auto" />
		<Setter Property="ScrollViewer.HorizontalScrollMode"
					Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollMode"
					Value="Auto" />
		<Setter Property="ScrollViewer.IsVerticalRailEnabled"
					Value="True" />
		<Setter Property="ScrollViewer.IsDeferredScrollingEnabled"
					Value="False" />
		<Setter Property="ScrollViewer.BringIntoViewOnFocusChange"
					Value="True" />
		<Setter Property="HorizontalContentAlignment"
					Value="Stretch" />
		<Setter Property="HorizontalAlignment"
					Value="Stretch" />
		<Setter Property="ItemContainerStyle"
					Value="{StaticResource DefaultComboBoxItemStyle}" />

		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<CarouselPanel />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<Grid x:Name="RootGrid"
							  BorderBrush="{TemplateBinding BorderBrush}"
							  BorderThickness="{TemplateBinding BorderThickness}"
							  Background="{TemplateBinding Background}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="PointerOver" />
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PressedBackground"
															 Storyboard.TargetProperty="Opacity"
															 Duration="{StaticResource MaterialAnimationDuration}"
															 To="1">
											<DoubleAnimation.EasingFunction>
												<CubicEase EasingMode="EaseIn" />
											</DoubleAnimation.EasingFunction>
										</DoubleAnimation>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Disabled">
									<VisualState.Setters>
										<Setter Target="PlaceholderElement.Foreground"
													Value="{StaticResource MaterialOnSurfaceLowBrush}" />
										<Setter Target="ContentPresenter.Foreground"
													Value="{StaticResource MaterialOnSurfaceLowBrush}" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused" />
								<VisualState x:Name="FocusedPressed" />
								<VisualState x:Name="Unfocused" />
								<VisualState x:Name="PointerFocused" />
								<VisualState x:Name="FocusedDropDown">
									<VisualState.Setters>
										<Setter Target="PopupBorder.Visibility"
													Value="Visible" />
									</VisualState.Setters>
								</VisualState>
							</VisualStateGroup>

							<VisualStateGroup x:Name="DropDownStates">

								<VisualState x:Name="Opened">
									<Storyboard>
										<SplitOpenThemeAnimation ClosedTargetName="ContentPresenter"
																	 ContentTranslationOffset="0"
																	 ContentTargetName="ScrollViewer"
																	 ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																	 OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																	 OpenedTargetName="PopupBorder"
																	 OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Closed">
									<Storyboard>
										<SplitCloseThemeAnimation ClosedTargetName="ContentPresenter"
																	  ContentTranslationOffset="40"
																	  ContentTranslationDirection="{Binding TemplateSettings.SelectedItemDirection, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																	  ContentTargetName="ScrollViewer"
																	  ClosedLength="{Binding TemplateSettings.DropDownClosedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																	  OffsetFromCenter="{Binding TemplateSettings.DropDownOffset, RelativeSource={RelativeSource Mode=TemplatedParent}}"
																	  OpenedTargetName="PopupBorder"
																	  OpenedLength="{Binding TemplateSettings.DropDownOpenedHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>

						<!-- Pressed Background -->
						<Border x:Name="PressedBackground"
									Background="{ThemeResource ComboBoxPressedHighlightThemeBrush}"
									Opacity="0"
									Grid.ColumnSpan="2" />

						<!-- Title -->
						<TextBlock x:Name="TitleElement"
									   Text="{TemplateBinding Text}"
									   Style="{StaticResource Subtitle1}"
									   Foreground="{StaticResource MaterialOnBackgroundBrush}"
									   VerticalAlignment="Center"
									   HorizontalAlignment="Left"
									   IsHitTestVisible="False"
									   MaxLines="1" />

						<!-- PlaceholderElement (showing placeholder text when no selection is done) -->
						<TextBlock x:Name="PlaceholderElement"
									   Grid.Column="1"
									   Text="{TemplateBinding PlaceholderText}"
									   Style="{StaticResource Body2}"
									   Foreground="{StaticResource MaterialOnBackgroundMediumBrush}"
									   VerticalAlignment="Center"
									   HorizontalAlignment="Right"
									   IsHitTestVisible="False"
									   MaxLines="1"
									   Visibility="{Binding SelectedIndex, RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource SelectedIndexToPlaceholderVisibility}}" />

						<!-- ContentPresenter (showing the selected value) -->
						<ContentPresenter x:Name="ContentPresenter"
											  Grid.Column="1"
											  VerticalAlignment="Center"
											  HorizontalAlignment="Right" />

						<!-- Popup -->
						<Popup x:Name="Popup">
							<Border x:Name="PopupBorder"
										CornerRadius="{StaticResource ComboBoxRadius}"
										Background="{StaticResource MaterialSurfaceBrush}">
								<ScrollViewer x:Name="ScrollViewer"
												  BorderBrush="Transparent"
												  BorderThickness="0"
												  CornerRadius="{StaticResource ComboBoxRadius}"
												  AutomationProperties.AccessibilityView="Raw"
												  BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}"
												  HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}"
												  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
												  IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}"
												  IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}"
												  IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
												  MinWidth="{ThemeResource ComboBoxPopupThemeMinWidth}"
												  VerticalSnapPointsType="OptionalSingle"
												  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
												  VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}"
												  VerticalSnapPointsAlignment="Near"
												  ZoomMode="Disabled">
									<ItemsPresenter />
								</ScrollViewer>
							</Border>
						</Popup>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
