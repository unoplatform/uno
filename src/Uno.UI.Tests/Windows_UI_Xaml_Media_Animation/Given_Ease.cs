using Microsoft.UI.Xaml.Media.Animation;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Uno.UI.Tests.Windows_UI_Xaml_Media_Animation
{
	/*
		Tests were generated by running code similar to this on UWP:
            var ease = new SineEase();
            double start = 100;
            double end = 200;
            for (double i = 0; i <= 1.1; i += 0.2)
            {
                var value = start + ease.Ease(i) * (end - start);
                Debug.WriteLine($@"AssertEase(sut, normalizedTime: {i}, expectedValue: {value}, testInfo);");
            }

	 */
	[TestClass]
	public class Given_Ease
	{
		private readonly record struct TestInfo(double StartValue, double FinalValue);

		private void AssertEase(IEasingFunction easingFunction, double normalizedTime, double expectedValue, TestInfo testInfo)
		{
			var actual = easingFunction.Ease(normalizedTime, testInfo.StartValue, testInfo.FinalValue, duration: 1.0);
			actual.Should().BeApproximately(expectedValue, 0.1);
		}

		[TestMethod]
		public void When_BounceEase_FinalValueGreaterThanInitial()
		{
			var sut = new BounceEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 130.24999499321, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 182.000029087067, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 154.50000166893, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 175.999999046326, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_BounceEase_FinalValueLowerThanInitial()
		{
			var sut = new BounceEase();
			var testInfo = new TestInfo(200, 100);
			AssertEase(sut, normalizedTime: 0, expectedValue: 200, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 169.75000500679, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 117.999970912933, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 145.49999833107, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 124.000000953674, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 100, testInfo);
		}

		[TestMethod]
		public void When_BackEase_Amplitude_1()
		{
			var sut = new BackEase();
			var testInfo = new TestInfo(100, 200);
			sut.Amplitude.Should().Be(1.0);
			AssertEase(sut, normalizedTime: 0, expectedValue: 99.999988079071, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 195.822811126709, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 235.463392734528, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 231.642258167267, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 210.955703258514, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_BackEase_Amplitude_4()
		{
			var sut = new BackEase() { Amplitude = 4 };
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 99.9999642372131, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 336.891269683838, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 406.653571128845, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 345.769023895264, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 246.222817897797, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_CircleEase()
		{
			var sut = new CircleEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 159.999996423721, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 180.000001192093, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 191.651517152786, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 197.979587316513, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_CubicEase()
		{
			var sut = new CubicEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 148.79999756813, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 178.3999979496, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 193.599998950958, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 199.199998378754, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_ElasticEase()
		{
			var sut = new ElasticEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 230.86884021759, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 208.175933361053, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 188.438564538956, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 203.484880924225, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_ElasticEase_Oscillations_Apringiness()
		{
			var sut = new ElasticEase() { Oscillations = 7, Springiness = 10 };
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 212.867403030396, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 198.521840572357, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 200.143039226532, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 199.991035461426, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_ExponentialEase()
		{
			var sut = new ExponentialEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 138.128066062927, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 163.686072826385, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 180.818122625351, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 192.302078008652, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_ExponentialEase_ZeroExponent()
		{
			var sut = new ExponentialEase() { Exponent = 0 };
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 119.999998807907, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 139.999997615814, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 160.000002384186, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 180.000001192093, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_PowerEase()
		{
			var sut = new PowerEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 135.999995470047, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 163.999998569489, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 184.00000333786, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 195.999997854233, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_PowerEase_ZeroPower()
		{
			var sut = new PowerEase() { Power = 0 };
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 100, testInfo);
		}

		[TestMethod]
		public void When_PowerEase_NegativePower()
		{
			var sut = new PowerEase() { Power = -10.0 };
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 100, testInfo);
		}

		[TestMethod]
		public void When_QuadraticEase()
		{
			var sut = new QuadraticEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 135.999995470047, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 163.999998569489, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 184.00000333786, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 195.999997854233, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_QuarticEase()
		{
			var sut = new QuarticEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 159.039998054504, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 187.039995193481, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 197.43999838829, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 199.839997291565, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_QuinticEase()
		{
			var sut = new QuinticEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 167.232000827789, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 192.223995923996, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 198.975998163223, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 199.96799826622, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}

		[TestMethod]
		public void When_SineEase()
		{
			var sut = new SineEase();
			var testInfo = new TestInfo(100, 200);
			AssertEase(sut, normalizedTime: 0, expectedValue: 100, testInfo);
			AssertEase(sut, normalizedTime: 0.2, expectedValue: 130.901694297791, testInfo);
			AssertEase(sut, normalizedTime: 0.4, expectedValue: 158.778524398804, testInfo);
			AssertEase(sut, normalizedTime: 0.6, expectedValue: 180.901706218719, testInfo);
			AssertEase(sut, normalizedTime: 0.8, expectedValue: 195.105654001236, testInfo);
			AssertEase(sut, normalizedTime: 1, expectedValue: 200, testInfo);
		}
	}
}
