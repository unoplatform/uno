using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.CodeAnalysis.Testing;
using Uno.Analyzers.Tests.Verifiers;
using System.Collections.Immutable;

namespace Uno.Analyzers.Tests;

using Verify = CSharpCodeFixVerifier<UnoMissingAssemblyAnalyzer, EmptyCodeFixProvider>;

[TestClass]
public class UnoMissingAssemblyAnalyzerTests
{
#if HAS_UNO_WINUI
	private static readonly ImmutableArray<PackageIdentity> _unoPackage = [new PackageIdentity("Uno.WinUI", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithLottie = [new PackageIdentity("Uno.WinUI", "5.2.161"), new PackageIdentity("Uno.WinUI.Lottie", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithMPE = [new PackageIdentity("Uno.WinUI", "5.2.161"), new PackageIdentity("Uno.WinUI.MediaPlayer.WebAssembly", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithGtk = [new PackageIdentity("Uno.WinUI", "5.2.161"), new PackageIdentity("Uno.WinUI.Runtime.Skia.Gtk", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithGtkAndMPE = [new PackageIdentity("Uno.WinUI", "5.2.161"), new PackageIdentity("Uno.WinUI.Runtime.Skia.Gtk", "5.2.161"), new PackageIdentity("Uno.WinUI.MediaPlayer.Skia.Gtk", "5.2.161")];
#else
	private static readonly ImmutableArray<PackageIdentity> _unoPackage = [new PackageIdentity("Uno.UI", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithLottie = [new PackageIdentity("Uno.UI", "5.2.161"), new PackageIdentity("Uno.UI.Lottie", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithMPE = [new PackageIdentity("Uno.UI", "5.2.161"), new PackageIdentity("Uno.UI.MediaPlayer.WebAssembly", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithGtk = [new PackageIdentity("Uno.UI", "5.2.161"), new PackageIdentity("Uno.UI.Runtime.Skia.Gtk", "5.2.161")];
	private static readonly ImmutableArray<PackageIdentity> _unoPackageWithGtkAndMPE = [new PackageIdentity("Uno.UI", "5.2.161"), new PackageIdentity("Uno.UI.Runtime.Skia.Gtk", "5.2.161"), new PackageIdentity("Uno.UI.MediaPlayer.Skia.Gtk", "5.2.161")];
#endif

	private static readonly ReferenceAssemblies _net80WithUno = ReferenceAssemblies.Net.Net80.AddPackages(_unoPackage);
	private static readonly ReferenceAssemblies _net80WithUnoAndLottie = ReferenceAssemblies.Net.Net80.AddPackages(_unoPackageWithLottie);
	private static readonly ReferenceAssemblies _net80WithUnoAndMPE = ReferenceAssemblies.Net.Net80.AddPackages(_unoPackageWithMPE);
	private static readonly ReferenceAssemblies _net80WithUnoAndGtk = ReferenceAssemblies.Net.Net80.AddPackages(_unoPackageWithGtk);
	private static readonly ReferenceAssemblies _net80WithUnoAndGtkAndMPE = ReferenceAssemblies.Net.Net80.AddPackages(_unoPackageWithGtkAndMPE);

	private const string WasmGlobalConfig = """
		is_global = true
		build_property.UnoRuntimeIdentifier = WebAssembly
		build_property.IsUnoHead = true
		""";

	private const string SkiaGlobalConfig = """
		is_global = true
		build_property.UnoRuntimeIdentifier = Skia
		build_property.IsUnoHead = true
		""";

	private const string UnoHeadGlobalConfig = """
		is_global = true
		build_property.IsUnoHead = true
		""";

	[TestMethod]
	public async Task UseProgressRingWithLottiePackage_NoDiagnostic()
	{
		var code = """
			using Microsoft.UI.Xaml.Controls;
			public class C
			{
				public ProgressRing M() => new ProgressRing();
			}
			""";

		var test = new Verify.Test()
		{
			TestCode = code,
			FixedCode = code,
			ReferenceAssemblies = _net80WithUnoAndLottie,
		};

		test.TestState.AnalyzerConfigFiles.Add(("/.globalconfig", WasmGlobalConfig));

		await test.RunAsync();
	}

	[TestMethod]
	public async Task UseProgressRingWithoutLottiePackage_Diagnostic()
	{
		var code = """
			// <auto-generated />
			using Microsoft.UI.Xaml.Controls;
			public class C
			{
				public ProgressRing M() => [|new ProgressRing()|];
			}
			""";

		var test = new Verify.Test()
		{
			TestCode = code,
			FixedCode = code,
			ReferenceAssemblies = _net80WithUno,
		};

		test.TestState.AnalyzerConfigFiles.Add(("/.globalconfig", UnoHeadGlobalConfig));

		await test.RunAsync();
	}

	[TestMethod]
	public async Task UseMPEWithoutPackageWasm_Diagnostic()
	{
		var code = """
			// <auto-generated />
			using Microsoft.UI.Xaml.Controls;
			public class C
			{
				public MediaPlayerElement M() => [|new MediaPlayerElement()|];
			}
			""";

		var test = new Verify.Test()
		{
			TestCode = code,
			FixedCode = code,
			ReferenceAssemblies = _net80WithUno,
		};

		test.TestState.AnalyzerConfigFiles.Add(("/.globalconfig", WasmGlobalConfig));

		await test.RunAsync();
	}

	[TestMethod]
	public async Task UseMPEWithPackageWasm_NoDiagnostic()
	{
		var code = """
			using Microsoft.UI.Xaml.Controls;
			public class C
			{
				public MediaPlayerElement M() => new MediaPlayerElement();
			}
			""";

		var test = new Verify.Test()
		{
			TestCode = code,
			FixedCode = code,
			ReferenceAssemblies = _net80WithUnoAndMPE,
		};

		test.TestState.AnalyzerConfigFiles.Add(("/.globalconfig", WasmGlobalConfig));

		await test.RunAsync();
	}

	[TestMethod]
	public async Task UseMPEWithoutPackageGtk_Diagnostic()
	{
		var code = """
			// <auto-generated />
			using Microsoft.UI.Xaml.Controls;
			public class C
			{
				public MediaPlayerElement M() => [|new MediaPlayerElement()|];
			}
			""";

		var test = new Verify.Test()
		{
			TestCode = code,
			FixedCode = code,
			ReferenceAssemblies = _net80WithUnoAndGtk,
		};

		test.TestState.AnalyzerConfigFiles.Add(("/.globalconfig", UnoHeadGlobalConfig));

		await test.RunAsync();
	}

	[TestMethod]
	public async Task UseMPEWithPackageGtk_NoDiagnostic()
	{
		var code = """
			using Microsoft.UI.Xaml.Controls;
			public class C
			{
				public MediaPlayerElement M() => new MediaPlayerElement();
			}
			""";

		var test = new Verify.Test()
		{
			TestCode = code,
			FixedCode = code,
			ReferenceAssemblies = _net80WithUnoAndGtkAndMPE,
		};

		test.TestState.AnalyzerConfigFiles.Add(("/.globalconfig", UnoHeadGlobalConfig));

		await test.RunAsync();
	}
}
