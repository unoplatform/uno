<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

#pragma warning disable 414

using System;
using Uno.Disposables;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Uno.UI.DataBinding;
using Uno.Extensions;
using Uno.UI;
using Uno.UI.Helpers;
using Uno.UI.Media;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Data;
using UIKit;
using CoreGraphics;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Media.Animation;
using Uno.Foundation.Logging;
using Windows.Foundation;
using Microsoft.UI.Xaml.Automation.Peers;
using Microsoft.UI.Xaml.Automation.Provider;
using Microsoft.UI.Xaml.Automation;
using Uno.UI.Xaml;
using ObjCRuntime;

<#
	foreach(var mixin in _mixins) {
#>

#if <#= mixin.TvOS #> || !__TVOS__

namespace <#= mixin.NamespaceName #>
{
	partial class <#= mixin.ClassName #> : IFrameworkElement, IXUidProvider, IFrameworkElementInternal
	{
		string IXUidProvider.Uid { get; set; }

		bool IFrameworkElementInternal.HasLayouter => <#= mixin.HasLayouter #>;

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		/// <summary>
		/// Gets the parent of this FrameworkElement in the object tree.
		/// </summary>
		public DependencyObject Parent => ((IDependencyObjectStoreProvider)this).Store.Parent as DependencyObject;
#endif

#if <#= mixin.HasAttachedToWindow #> // HasAttachedToWindow
		partial void OnAttachedToWindowPartial()
		{
			OnLoading();
			OnLoaded();
		}

		partial void OnDetachedFromWindowPartial()
		{
			OnUnloaded();
		}
#endif

#if <#= mixin.OverridesAttachedToWindow #> // OverridesAttachedToWindow
		private UIWindow _currentWindow;

		public override void MovedToWindow()
		{
			base.MovedToWindow();

			try
			{
				var newWindow = Window;
				var superView = Superview;

				if(_currentWindow != newWindow)
				{
					if(newWindow != null)
					{
						if(_superViewRef?.GetTarget() == null && superView != null)
						{
							_superViewRef = new WeakReference<UIView>(superView);
							SyncBinder(superView, newWindow);
							((IDependencyObjectStoreProvider)this).Store.Parent = superView;
						}

						OnLoading();
						OnLoaded();
					}
					else
					{
						OnUnloaded();
					}

					_currentWindow = newWindow;
				}
			}
			catch(Exception e)
			{
				// On iOS, this handler is critical in the context of newWindow == null. If an
				// exception is raised for a tree of UIView instances the complete chain of OnUnloaded
				// will be interrupted, creating a memory leak as the controls that would have been unloaded
				// will not unbind properly from their respective parents.

				this.Log().Error($"Failed to process MoveToWindow for {GetType()}", e);
			}
		}
#endif

		// WillMoveToSuperview may not be called if the element is moved into Window immediately.
		private WeakReference<UIView> _superViewRef;

		public override void WillMoveToSuperview(UIView newsuper)
		{
			base.WillMoveToSuperview(newsuper);

			try
			{
				if(BinderReferenceHolder.IsEnabled)
				{
					if(newsuper != null)
					{
						BinderReferenceHolder.AddNativeReference(this, newsuper);
					}
					else
					{
						BinderReferenceHolder.RemoveNativeReference(this, _superViewRef.GetTarget() as global::Foundation.NSObject);
					}
				}

				_superViewRef = new WeakReference<UIView>(newsuper);

				WillMoveToSuperviewPartial(newsuper);
				SyncBinder(newsuper, Window);
				((IDependencyObjectStoreProvider)this).Store.Parent = newsuper;
			}
			catch(Exception e)
			{
				Application.Current.RaiseRecoverableUnhandledExceptionOrLog(e, this);
			}
		}

		partial void WillMoveToSuperviewPartial(UIView newsuper);

		private void SyncBinder(UIView superview, UIWindow window)
		{
			if(superview == null && window == null)
			{
				ClearBindings();
			}
		}

		public event TypedEventHandler<FrameworkElement, object> Loading;

		public event RoutedEventHandler Loaded;

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		public event DependencyPropertyChangedEventHandler IsEnabledChanged;
#endif

		public event RoutedEventHandler Unloaded;

		public event SizeChangedEventHandler SizeChanged;

#if <#= mixin.DefineLayoutSubviews #> || <#= mixin.DefineSetNeedsLayout #> // DefineLayoutSubviews || DefineSetNeedsLayout
		private bool _layoutRequested = false;
#endif

#if <#= mixin.DefineLayoutSubviews #> // DefineLayoutSubviews
		public override void LayoutSubviews()
		{
			_layoutRequested = false;
			base.LayoutSubviews();
		}
#endif

#if <#= mixin.DefineSetNeedsLayout #> // DefineSetNeedsLayout
		public override void SetNeedsLayout()
		{
			// Reminder: Skipping the call to SetNeedsLayout may cause some controls
			// to layout incorrectly (like SinglelineTextBoxView) when Window == null
			// and that they are re-attached to the Window.

			base.SetNeedsLayout();

			SetNeedsLayoutPartial();

			if (!_layoutRequested)
			{
				_layoutRequested = true;
				SetSuperviewNeedsLayout();
			}
		}

		partial void SetNeedsLayoutPartial();
#endif

		public virtual void SetSuperviewNeedsLayout()
		{
			// Resolve the property only once, to avoid paying the cost of the interop.
			var actualSuperview = Superview;

			if (actualSuperview != null)
			{
				actualSuperview.SetNeedsLayout();
			}
		}

		partial void AdjustArrangePartial(ref Size size);
		public virtual Size AdjustArrange(Size size)
		{
			AdjustArrangePartial(ref size);

			return size;
		}

		public object FindName (string name)
		{
			return IFrameworkElementHelper.FindName (this, this, name);
		}

		#region Name Dependency Property

		private void OnNameChanged(string oldValue, string newValue) {
			if (FrameworkElementHelper.IsUiAutomationMappingEnabled)
			{
				Microsoft.UI.Xaml.Automation.AutomationProperties.SetAutomationId(this, newValue);
			}
		}

		[GeneratedDependencyProperty(DefaultValue = "", ChangedCallback = true)]
		public static DependencyProperty NameProperty { get ; } = CreateNameProperty();

		public virtual string Name
		{
			get => GetNameValue();
			set => SetNameValue(value);
		}
		#endregion

		#region Margin Dependency Property
		[GeneratedDependencyProperty(ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MarginProperty { get ; } = CreateMarginProperty();

		public Thickness Margin
		{
			get => GetMarginValue();
			set => SetMarginValue(value);
		}
		private static Thickness GetMarginDefaultValue() => Thickness.Empty;
		#endregion

		#region HorizontalAlignment Dependency Property

		[GeneratedDependencyProperty(DefaultValue = HorizontalAlignment.Stretch, Options = FrameworkPropertyMetadataOptions.AffectsArrange, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty HorizontalAlignmentProperty { get ; } = CreateHorizontalAlignmentProperty();

		public
#if <#= mixin.IsUIControl #> // IsUIControl
		new
#endif
		HorizontalAlignment HorizontalAlignment
		{
			get => GetHorizontalAlignmentValue();
			set => SetHorizontalAlignmentValue(value);
		}
		#endregion

		#region VerticalAlignment Dependency Property

		[GeneratedDependencyProperty(DefaultValue = HorizontalAlignment.Stretch, Options = FrameworkPropertyMetadataOptions.AffectsArrange, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty VerticalAlignmentProperty { get ; } = CreateVerticalAlignmentProperty();

		public
#if <#= mixin.IsUIControl #> // IsUIControl
		new
#endif
		VerticalAlignment VerticalAlignment
		{
			get => GetVerticalAlignmentValue();
			set => SetVerticalAlignmentValue(value);
		}
		#endregion

		#region Width Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.NaN, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty WidthProperty { get ; } = CreateWidthProperty();

		public double Width
		{
			get => GetWidthValue();
			set => SetWidthValue(value);
		}
		#endregion

		#region Height Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.NaN, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty HeightProperty { get ; } = CreateHeightProperty();

		public double Height
		{
			get => GetHeightValue();
			set => SetHeightValue(value);
		}
		#endregion

		#region MinWidth Dependency Property
		[GeneratedDependencyProperty(DefaultValue = 0.0, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MinWidthProperty { get ; } = CreateMinWidthProperty();

		public double MinWidth
		{
			get => GetMinWidthValue();
			set => SetMinWidthValue(value);
		}
		#endregion

		#region MinHeight Dependency Property
		[GeneratedDependencyProperty(DefaultValue = 0.0, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MinHeightProperty { get ; } = CreateMinHeightProperty();

		public double MinHeight
		{
			get => GetMinHeightValue();
			set => SetMinHeightValue(value);
		}
		#endregion

		#region MaxWidth Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.PositiveInfinity, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MaxWidthProperty { get ; } = CreateMaxWidthProperty();

		public double MaxWidth
		{
			get => GetMaxWidthValue();
			set => SetMaxWidthValue(value);
		}
		#endregion

		#region MaxHeight Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.PositiveInfinity, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MaxHeightProperty { get ; } = CreateMaxHeightProperty();

		public double MaxHeight
		{
			get => GetMaxHeightValue();
			set => SetMaxHeightValue(value);
		}
		#endregion

		public double ActualWidth => GetActualWidth();
		public double ActualHeight => GetActualHeight();

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		private protected virtual double GetActualWidth() => _actualSize.Width;
		private protected virtual double GetActualHeight() => _actualSize.Height;
#endif

		private Size _actualSize;
		public override CGRect Frame
		{
			get { return base.Frame; }
			set
			{
				try
				{
					var previousSize = _actualSize;
					_actualSize = value.Size.ToFoundationSize().PhysicalToLogicalPixels();

#if <#= mixin.IsFrameworkElement #> // IsFrameworkElement
					RenderSize = _actualSize;
#endif

					CGAffineTransform? oldTransform = null;
					if (!Transform.IsIdentity)
					{
						// If UIView.Transform is not identity, then modifying the frame will give undefined behavior. (https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/occ/instp/UIView/transform)
						// We reapply the transform based on the new size straight after.
						oldTransform = Transform;
						Transform = CGAffineTransform.MakeIdentity();
					}

					base.Frame = value;
					AppliedFrame = value;

					if (previousSize != _actualSize)
					{
						SizeChanged?.Invoke(this, new SizeChangedEventArgs(this, previousSize, _actualSize));

						if (_renderTransform != null)
						{
							// This will set the updated Transform
							_renderTransform.UpdateSize(_actualSize);
						}
						else if (oldTransform.HasValue)
						{
							// We grudgingly support setting the native transform directly without going through RenderTransform.
							Transform = oldTransform.Value;
						}

#if <#= mixin.IsFrameworkElement #> // IsFrameworkElement
						if (Superview != null && !(Superview is DependencyObject))
						{
							// If this FrameworkElement has a native parent, then it probably wasn't measured prior to having its Frame changed.
							// Set RequiresMeasure flag so that this branch of the visual tree will be measured before being arranged, this is
							// required for some views (eg Image) to display correctly.
							SetLayoutFlags(LayoutFlag.MeasureDirty);
						}
#endif
					}
					else if (oldTransform.HasValue)
					{
						// We grudgingly support setting the native transform directly without going through RenderTransform.
						Transform = oldTransform.Value;
					}
				}
				catch (Exception ex)
				{
					// The app must not crash if any managed exception happens in the
					// native override
					Application.Current.RaiseRecoverableUnhandledException(ex);
				}
			}
		}

		/// <summary>
		/// The frame applied to this child when last arranged by its parent. This may differ from the current UIView.Frame if a RenderTransform is set.
		/// </summary>
		public Rect AppliedFrame { get; private set; }

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement

		public event EventHandler<object> LayoutUpdated;

		internal virtual void OnLayoutUpdated ()
		{
			if (LayoutUpdated != null) {
				LayoutUpdated (this, EventArgs.Empty);
			}
		}

		// This is also defined in UIElement for actual UIElement hierarchy
		internal bool IsRenderingSuspended { get; set; }


		#region Style DependencyProperty

		[GeneratedDependencyProperty(DefaultValue = null, ChangedCallback = true, Options = FrameworkPropertyMetadataOptions.ValueDoesNotInheritDataContext)]
		public static DependencyProperty StyleProperty { get; } = CreateStyleProperty();

		public Style Style
		{
			get => GetStyleValue();
			set => SetStyleValue(value);
		}

		protected virtual void OnStyleChanged(Style oldValue, Style newValue)
		{
			OnStyleChanged(oldValue, newValue, DependencyPropertyValuePrecedences.ExplicitOrImplicitStyle);
		}

		private void OnStyleChanged(Style oldStyle, Style newStyle, DependencyPropertyValuePrecedences precedence)
		{
			if (oldStyle == newStyle)
			{
				// Nothing to do
				return;
			}

			oldStyle?.ClearInvalidProperties(this, newStyle, precedence);

			newStyle?.ApplyTo(this, precedence);
		}

		#endregion

		[EditorBrowsable(EditorBrowsableState.Never)]
		public bool IsParsing { get; set; }

		[EditorBrowsable(EditorBrowsableState.Never)]
		public void CreationComplete()
		{
			IsParsing = false;
		}
#endif

		internal void SuspendRendering()
		{
			if(!IsRenderingSuspended)
			{
				IsRenderingSuspended = true;

				Alpha = 0;
				SuspendBindings();
			}
		}

		internal void ResumeRendering()
		{
			if(IsRenderingSuspended)
			{
				IsRenderingSuspended = false;

				Alpha = (float)Opacity;
				ResumeBindings();
			}
		}

		/// <summary>
		/// An optional render phase, see x:Bind.
		/// </summary>
		public int? RenderPhase { get; set; }

		public void ApplyBindingPhase(int phase)
		{
			void ApplyChildren()
			{
				if(this is Uno.UI.Controls.IShadowChildrenProvider provider)
				{
					foreach (var child in provider.ChildrenShadow)
					{
						(child as IFrameworkElement)?.ApplyBindingPhase(phase);
					}
				}
			}

			if (RenderPhase.HasValue)
			{
				if (RenderPhase <= phase)
				{
					ApplyChildren();
					ResumeRendering();
				}
				else
				{
					SuspendRendering();
				}
			}
			else
			{
				ApplyChildren();
			}
		}

		public override void MovedToSuperview()
		{
			base.MovedToSuperview();
			OnMovedToSuperview();

			SetNeedsLayout();
		}

		partial void OnMovedToSuperview();

		/// <summary>
		/// Indicates if the view is currently loaded.
		/// </summary>
		public bool IsLoaded { get; private set; }

		private protected virtual void OnPostLoading() {}

		internal virtual void OnLoading()
		{
			OnLoadingPartial();
			Loading?.Invoke(<#= mixin.LoadingInvokeArgument #>, null);
			OnPostLoading();
		}

		partial void OnLoadingPartial();

		private protected virtual void OnLoaded()
		{
			IsLoaded = true;

			SetNeedsLayout();
			OnLoadedPartial();

			Loaded?.Invoke(this, new RoutedEventArgs(this));
		}

		partial void OnLoadedPartial();

		private protected virtual void OnUnloaded()
		{
			IsLoaded = false;

			OnUnloadedPartial();

			if (Unloaded != null)
			{
				Unloaded(this, new RoutedEventArgs(this));
			}
		}

		partial void OnUnloadedPartial();

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region IsEnabled Dependency Property

		[GeneratedDependencyProperty(
			DefaultValue = true,
			Options = FrameworkPropertyMetadataOptions.Inherits,
			ChangedCallback = true
		)]
		public static DependencyProperty IsEnabledProperty { get ; } = CreateIsEnabledProperty();

		public bool IsEnabled
		{
			get => GetIsEnabledValue();
			set => SetIsEnabledValue(value);
		}

		private void OnIsEnabledChanged(DependencyPropertyChangedEventArgs e)
		{
			var newValue = (bool)e.NewValue;
			UserInteractionEnabled = newValue; // Set iOS native equivalent

			IsEnabledChanged?.Invoke(this, e);
		}

		#endregion
#endif

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region Opacity Dependency Property

		public double Opacity
		{
			get { return (double)this.GetValue(OpacityProperty); }
			set { this.SetValue(OpacityProperty, value); }
		}

		public static DependencyProperty OpacityProperty { get ; } =
			DependencyProperty.Register("Opacity", typeof(double), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(1.0, (s, a) => ((<#= mixin.ClassName #>)s).OnOpacityChanged(a)));

		private void OnOpacityChanged(DependencyPropertyChangedEventArgs args)
		{
			// Don't update the internal value if the value is being animated.
			// The value is being animated by the platform itself.
			if (!(args.NewPrecedence == DependencyPropertyValuePrecedences.Animations && args.BypassesPropagation))
			{
				Alpha = IsRenderingSuspended ? 0 : (nfloat)Opacity;
			}
		}
		#endregion

		#region Visibility Dependency Property

		/// <summary>
		/// Sets the visibility of the current view
		/// </summary>
		public Visibility Visibility
		{
			get { return (Visibility)this.GetValue(VisibilityProperty); }
			set { this.SetValue(VisibilityProperty, value); }
		}

		public static DependencyProperty VisibilityProperty { get ; } =
			DependencyProperty.Register(
				"Visibility",
				typeof(Visibility),
				typeof(<#= mixin.ClassName #>),
				new FrameworkPropertyMetadata(
					Visibility.Visible,
					(s, e) => (s as <#= mixin.ClassName #>).OnVisibilityChanged((Visibility)e.OldValue, (Visibility)e.NewValue)
				)
			);

		protected virtual void OnVisibilityChanged(Visibility oldValue, Visibility newValue)
		{
			var newVisibility = (Visibility)newValue;

			if (base.Hidden != newVisibility.IsHidden())
			{
				base.Hidden = newVisibility.IsHidden();
				this.SetNeedsLayout();

				if (newVisibility == Visibility.Visible)
				{
					// This recursively invalidates the layout of all subviews
					// to ensure LayoutSubviews is called and views get updated.
					// Failing to do this can cause some views to remain collapsed.
					SetSubviewsNeedLayout();
				}
			}

			OnVisibilityChangedPartial(oldValue, newValue);
		}

		partial void OnVisibilityChangedPartial(Visibility oldValue, Visibility newValue);

		public override bool Hidden
		{
			get
			{
				return base.Hidden;
			}
			set
			{
				// Only set the Visility property, the Hidden property is updated
				// in the property changed handler as there are actions associated with
				// the change.
				Visibility = value ? Visibility.Collapsed : Visibility.Visible;
			}
		}

		public void SetSubviewsNeedLayout()
		{
			base.SetNeedsLayout();
			foreach (var view in this.GetChildren())
			{
				(view as IFrameworkElement)?.SetSubviewsNeedLayout();
			}
		}
		#endregion

#endif

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region IsHitTestVisible Dependency Property

		public bool IsHitTestVisible
		{
			get { return (bool)this.GetValue(IsHitTestVisibleProperty); }
			set { this.SetValue(IsHitTestVisibleProperty, value); }
		}

		public static DependencyProperty IsHitTestVisibleProperty { get ; } =
			DependencyProperty.Register("IsHitTestVisible", typeof(bool), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(true, (s, e) => (s as <#= mixin.ClassName #>).OnIsHitTestVisibleChanged(e)));

		private void OnIsHitTestVisibleChanged(DependencyPropertyChangedEventArgs e)
		{
		}

		#endregion

		#region Tag Dependency Property

		public new object Tag
		{
			get { return this.GetValue(TagProperty); }
			set { this.SetValue(TagProperty, value); }
		}

		public static DependencyProperty TagProperty { get ; } =
			DependencyProperty.Register("Tag", typeof(object), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(null, (s, e) => (s as <#= mixin.ClassName #>).OnTagChanged(e)));

		private void OnTagChanged(DependencyPropertyChangedEventArgs e)
		{
		}

		#endregion
#endif

		#region Transitions Dependency Property

		public TransitionCollection Transitions
		{
			get { return (TransitionCollection)this.GetValue(TransitionsProperty); }
			set { this.SetValue(TransitionsProperty, value); }
		}

		public static DependencyProperty TransitionsProperty { get ; } =
			DependencyProperty.Register("Transitions", typeof(TransitionCollection), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(null, OnTransitionsChanged));

		private static void OnTransitionsChanged(object dependencyObject, DependencyPropertyChangedEventArgs args)
		{
			var frameworkElement = dependencyObject as IFrameworkElement;

			if (frameworkElement != null)
			{
				var oldValue = (TransitionCollection)args.OldValue;

				if (oldValue != null)
				{
					foreach (var item in oldValue)
					{
						item.DetachFromElement(frameworkElement);
					}
				}

				var newValue = (TransitionCollection)args.NewValue;

				if (newValue != null)
				{
					foreach (var item in newValue)
					{
						item.AttachToElement(frameworkElement);
					}
				}
			}
		}
		#endregion

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region RenderTransform Dependency Property

		/// <summary>
		/// This is a Transformation for a UIElement.  It binds the Render Transform to the View
		/// </summary>
		public Transform RenderTransform
		{
			get => (Transform)this.GetValue(RenderTransformProperty);
			set => this.SetValue(RenderTransformProperty, value);
		}

		/// <summary>
		/// Backing dependency property for <see cref="RenderTransform"/>
		/// </summary>
		public static DependencyProperty RenderTransformProperty { get ; } =
			DependencyProperty.Register("RenderTransform", typeof(Transform), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(null, OnRenderTransformChanged));

		private static void OnRenderTransformChanged(object dependencyObject, DependencyPropertyChangedEventArgs args)
		{
			var view = (<#= mixin.ClassName #>)dependencyObject;

			view._renderTransform?.Dispose();

			if (args.NewValue is Transform transform)
			{
				view._renderTransform = new NativeRenderTransformAdapter(view, transform, view.RenderTransformOrigin);
			}
			else
			{
				// Sanity
				view._renderTransform = null;
			}
		}

		private NativeRenderTransformAdapter _renderTransform;
		#endregion

		#region RenderTransformOrigin Dependency Property

		/// <summary>
		/// This is a Transformation for a UIElement.  It binds the Render Transform to the View
		/// </summary>
		public Point RenderTransformOrigin
		{
			get => (Point)this.GetValue(RenderTransformOriginProperty);
			set => this.SetValue(RenderTransformOriginProperty, value);
		}

		/// <summary>
		/// Backing dependency property for <see cref="RenderTransformOrigin"/>
		/// </summary>
		public static DependencyProperty RenderTransformOriginProperty { get ; } =
			DependencyProperty.Register("RenderTransformOrigin", typeof(Point), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(default(Point), OnRenderTransformOriginChanged));

		private static void OnRenderTransformOriginChanged(object dependencyObject, DependencyPropertyChangedEventArgs args)
		{
			var view = ((<#= mixin.ClassName #>)dependencyObject);
			var point = (Point)args.NewValue;

			view._renderTransform?.UpdateOrigin(point);
		}

		#endregion
#endif

		#region Background Dependency Property

		[GeneratedDependencyProperty(DefaultValue = null, Options=FrameworkPropertyMetadataOptions.ValueInheritsDataContext, ChangedCallback = true)]
		public static DependencyProperty BackgroundProperty { get ; } = CreateBackgroundProperty();

		public <#= mixin.IsNewBackground #> Brush Background
		{
			get => GetBackgroundValue();
			set => SetBackgroundValue(value);
		}

		Action _brushChanged;
		IDisposable _backgroundBrushChangedSubscription;

		protected virtual void OnBackgroundChanged(DependencyPropertyChangedEventArgs e)
		{
			var newValue = e.NewValue as Brush;

			_backgroundBrushChangedSubscription?.Dispose();
			_backgroundBrushChangedSubscription = Brush.SetupBrushChanged(newValue, ref _brushChanged, () => Layer.BackgroundColor = Brush.GetFallbackColor(newValue));
		}

		#endregion

		public override UIView HitTest(CGPoint point, UIEvent uievent)
		{
			//If IsHitTestVisible is false, ignore children
			if (!IsHitTestVisible ||
#if <#= mixin.IsFrameworkElement #> //IsFrameworkElement
				this is Microsoft.UI.Xaml.Controls.Control { IsEnabled: false }
#else
				!IsEnabled
#endif
			)
			{
				return null;
			}
#if <#= mixin.IsFrameworkElement #> //IsFrameworkElement
			if (Clip?.Rect is Rect rect && !rect.Contains(point))
			{
				// Clipped region must not block touch to the rest of the visual tree
				return null;
			}
#endif

			var viewHit = base.HitTest(point, uievent);

			//Check for background
			<# //TODO: This will not find HitCheckBackground if viewHit is not of the same type. HitCheckBackground should either be put on IFrameworkElement or, more likely, refactored out of existence. #>
			var hitCheck = (viewHit as <#= mixin.ClassName #>)?.IsViewHit() ?? true;
			return hitCheck ? viewHit : null;
		}


#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		partial void HitCheckOverridePartial(ref bool hitCheck);

		protected virtual bool IsViewHit()
		{
			var hitCheck =
				<# // We don't expect native UI elements to have a background for the click to work #>
				<# if (mixin.ClassName == "FrameworkElement") { #>
				Background != null &&
				<# } #>
				true;
			HitCheckOverridePartial(ref hitCheck);

			return  hitCheck;
		}
#endif

		private void OnGenericPropertyUpdated(DependencyPropertyChangedEventArgs args)
		{
			SetNeedsLayout();
		}

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		private static readonly Uri _defaultUri = new Uri("ms-appx:///");
		public Uri BaseUri { get; internal set; } = _defaultUri;
#endif


		/// <summary>
		/// Provides a native value for the dependency property with the given name on the current instance. If the value is a primitive type,
		/// its native representation is returned. Otherwise, the <see cref="object.ToString"/> implementation is used/returned instead.
		/// </summary>
		/// <param name="dependencyPropertyName">The name of the target dependency property</param>
		/// <returns>The content of the target dependency property (its actual value if it is a primitive type ot its <see cref="object.ToString"/> representation otherwise</returns>
		[global::Foundation.Export("getDependencyPropertyValue:")]
		public global::Foundation.NSString GetDependencyPropertyValue(global::Foundation.NSString dependencyPropertyName)
		{
			var dpValue = UIElement.GetDependencyPropertyValueInternal(this, dependencyPropertyName);
			if (dpValue == null)
			{
				return null;
			}

			// If all else fails, just return the string representation of the DP's value
			return new global::Foundation.NSString(dpValue.ToString());
		}


		/// <summary>
		/// Sets the specified dependency property value using the format "name|value"
		/// </summary>
		/// <param name="dependencyPropertyNameAndvalue">The name and value of the property</param>
		/// <returns>The currenty set value at the Local precedence</returns>
		[global::Foundation.Export("setDependencyPropertyValue:")]
		public global::Foundation.NSString SetDependencyPropertyValue(global::Foundation.NSString dependencyPropertyNameAndValue)
		{
				return new global::Foundation.NSString(UIElement.SetDependencyPropertyValueInternal(this, dependencyPropertyNameAndValue) ?? "");
		}

		#region AutomationPeer

		private AutomationPeer _automationPeer;

#if !<#= mixin.HasAutomationPeer #> // HasAutomationPeer
		private AutomationPeer OnCreateAutomationPeerOverride()
		{
			return null;
		}

		private string GetAccessibilityInnerTextOverride()
		{
			return null;
		}
#endif

		protected
#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		virtual
#else
		override
#endif
		AutomationPeer OnCreateAutomationPeer()
		{
			if (OnCreateAutomationPeerOverride() is AutomationPeer automationPeer)
			{
				return automationPeer;
			}

			if (AutomationProperties.GetName(this) is string name && !string.IsNullOrEmpty(name))
			{
				return new FrameworkElementAutomationPeer(this);
			}

			return null;
		}

		public virtual string GetAccessibilityInnerText() // TODO: internal
		{
			if (GetAccessibilityInnerTextOverride() is string innerText)
			{
				return innerText;
			}

			return null;
		}

		public AutomationPeer GetAutomationPeer() // TODO: internal
		{
			if (_automationPeer == null)
			{
				_automationPeer = OnCreateAutomationPeer();
			}

			return _automationPeer;
		}

		public override bool AccessibilityActivate()
		{
			return GetAutomationPeer()?.AccessibilityActivate() ?? false;
		}

		public override bool IsAccessibilityElement
		{
			get => GetAutomationPeer()?.UpdateAccessibilityElement() ?? false;
			set => base.IsAccessibilityElement = value;
		}

		#endregion
	}
}

#endif

<#
 }
#>

<#+
	public void AddClass(
		string namespaceName,
		string className,
		bool defineSetNeedsLayout = true,
		bool defineLayoutSubviews = true,
		bool isUIControl = false,
		bool isUIElement = false,
		bool hasAttachedToWindow = true,
		bool overridesAttachedToWindow = false,
		bool isNewBackground = false,
		bool hasAutomationPeer = false,
		bool hasLayouter = false,
		bool derivesFromFrameworkElement = true,
		bool tvos = true
	)
	{
		_mixins.Add(
			new MixinParams {
				NamespaceName = namespaceName,
				ClassName = className,
				DefineSetNeedsLayout = defineSetNeedsLayout ? "true" : "false",
				DefineLayoutSubviews = defineLayoutSubviews ? "true" : "false",
				IsUIControl = isUIControl ? "true" : "false",
				HasAttachedToWindow = hasAttachedToWindow ? "true" : "false",
				OverridesAttachedToWindow = overridesAttachedToWindow ? "true" : "false",
				IsNewBackground = isNewBackground ? "new" : "",
				IsFrameworkElement = className == "FrameworkElement" ? "true" : "false",
				HasAutomationPeer = hasAutomationPeer ? "true" : "false",
				HasLayouter = hasLayouter ? "true" : "false",
				LoadingInvokeArgument = derivesFromFrameworkElement ? "this" : "null",
				TvOS = tvos ? "true" : "false"
			}
		);
	}

	private class MixinParams
	{
		public string NamespaceName;
		public string ClassName;
		public string DefineSetNeedsLayout;
		public string DefineLayoutSubviews;
		public string IsUIControl;
		public string HasAttachedToWindow;
		public string OverridesAttachedToWindow;
		public string IsNewBackground;
		public string IsFrameworkElement;
		public string HasAutomationPeer;
		public string HasLayouter;
		public string LoadingInvokeArgument;
		public string TvOS;
	}

	private List<MixinParams> _mixins = new List<MixinParams>();
#>
