<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:not_android="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:converters="using:Uno.UI.Converters"
					xmlns:local="using:GenericApp.Views.Controls"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:u="using:Uno.UI.Controls"
					xmlns:not_win="http://uno.ui/not_win"
					xmlns:ios="http://uno.ui/ios#using:Uno.UI.Views.Controls;Uno.UI.Controls;UIKit"
					xmlns:android="http://uno.ui/android#using:Uno.UI.Controls"
					xmlns:native_ios="using:UIKit"
					xmlns:native_android="using:Android.Widget"
					xmlns:uBehaviors="using:Uno.UI.Behaviors"
					xmlns:legacy="using:Uno.UI.Controls.Legacy"
					xmlns:maps="using:Microsoft.UI.Xaml.Controls.Maps"
					xmlns:mapsPresenter="using:Microsoft.UI.Xaml.Controls.Maps"
					xmlns:wasm="http://uno.ui/wasm"
					xmlns:skia="http://uno.ui/skia"
					xmlns:macos="http://uno.ui/macos"
					xmlns:IS_UNIT_TESTS="http://uno.ui/IS_UNIT_TESTS"
					xmlns:not_wasm="http://uno.ui/not_wasm"
					xmlns:toolkit="using:Uno.UI.Toolkit"
					mc:Ignorable="d not_win ios android skia wasm not_wasm IS_UNIT_TESTS macos">

	<!-- Default native Button styles -->
	<android:Style x:Key="NativeDefaultButton"
				   TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<BindableButtonEx Text="{TemplateBinding Content}"
									  IsEnabled="{TemplateBinding IsEnabled}"
									  Foreground="{TemplateBinding Foreground}"
									  ForegroundColor="White"
									  DisableWhenNoCommand="false" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<android:Style x:Key="AndroidButtonStyle"
				   BasedOn="{StaticResource NativeDefaultButton}"
				   TargetType="Button" />

	<ios:Style x:Key="NativeDefaultButton"
			   TargetType="Button">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<ios:BindableUIButton Text="{TemplateBinding Content}"
									  IsEnabled="{TemplateBinding IsEnabled}"
									  Foreground="{TemplateBinding Foreground}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<ios:Style x:Key="iOSButtonStyle"
			   BasedOn="{StaticResource NativeDefaultButton}"
			   TargetType="Button" />

	<wasm:Style
		x:Key="NativeDefaultButton"
		TargetType="Button"
				BasedOn="{StaticResource XamlDefaultButton}" />

	<skia:Style
		x:Key="NativeDefaultButton"
		TargetType="Button"
				BasedOn="{StaticResource XamlDefaultButton}" />

	<IS_UNIT_TESTS:Style x:Key="NativeDefaultButton"
				TargetType="Button"
				BasedOn="{StaticResource XamlDefaultButton}" />

	<not_win:Style
		TargetType="Button"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultButton}" />

	<!-- Default native CheckBox styles -->
	<android:Style x:Key="NativeDefaultCheckBox"
				   TargetType="CheckBox">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CheckBox">
					<android:BindableCheckBox Text="{TemplateBinding Content}"
											  Checked="{TemplateBinding IsChecked}"
											  Enabled="{TemplateBinding IsEnabled}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<android:Style x:Key="AndroidCheckBoxStyle"
				   BasedOn="{StaticResource NativeDefaultCheckBox}"
				   TargetType="Button" />

	<ios:Style x:Key="NativeDefaultCheckBox"
			   TargetType="CheckBox">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CheckBox">
					<StackPanel Orientation="Horizontal">
						<ios:BindableUISwitch IsOn="{TemplateBinding IsChecked, Mode=TwoWay}"
										  Enabled="{TemplateBinding IsEnabled}"
										  TintColorBrush="{TemplateBinding BorderBrush}"
										  OnTintColorBrush="{TemplateBinding Background}"
										  ThumbTintColorBrush="{TemplateBinding Foreground}" />
						<ContentPresenter Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<wasm:Style
		x:Key="NativeDefaultCheckBox"
		TargetType="CheckBox"
				BasedOn="{StaticResource XamlDefaultCheckBox}" />

	<skia:Style
		x:Key="NativeDefaultCheckBox"
		TargetType="CheckBox"
				BasedOn="{StaticResource XamlDefaultCheckBox}" />

	<macos:Style
		x:Key="NativeDefaultCheckBox"
		TargetType="CheckBox"
				BasedOn="{StaticResource XamlDefaultCheckBox}" />

	<IS_UNIT_TESTS:Style x:Key="NativeDefaultCheckBox"
				TargetType="CheckBox"
				BasedOn="{StaticResource XamlDefaultCheckBox}" />

	<not_win:Style
		TargetType="CheckBox"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultCheckBox}" />

	<!-- Default native RadioButton styles -->
	<android:Style x:Key="AndroidRadioButtonStyle"
				   TargetType="RadioButton">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="RadioButton">
					<android:BindableRadioButton Text="{TemplateBinding Content}"
												 Checked="{TemplateBinding IsChecked}"
												 Enabled="{TemplateBinding IsEnabled}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<!-- Default native ToggleSwitch styles -->
	<ios:Style x:Key="NativeDefaultToggleSwitch"
			   TargetType="ToggleSwitch">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleSwitch">
					<ios:BindableUISwitch IsOn="{TemplateBinding IsOn, Mode=TwoWay}"
									  Enabled="{TemplateBinding IsEnabled}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<android:Style x:Key="NativeDefaultToggleSwitch"
				   TargetType="ToggleSwitch">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleSwitch">
					<android:BindableSwitchCompat Checked="{TemplateBinding IsOn, Mode=TwoWay}"
										  Enabled="{TemplateBinding IsEnabled}"
										  Text="{TemplateBinding Header}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<wasm:Style
		x:Key="NativeDefaultToggleSwitch"
		TargetType="ToggleSwitch"
		BasedOn="{StaticResource XamlDefaultToggleSwitch}" />

	<skia:Style
		x:Key="NativeDefaultToggleSwitch"
		TargetType="ToggleSwitch"
		BasedOn="{StaticResource XamlDefaultToggleSwitch}" />

	<macos:Style
		x:Key="NativeDefaultToggleSwitch"
		TargetType="ToggleSwitch"
		BasedOn="{StaticResource XamlDefaultToggleSwitch}" />

	<not_win:Style
		TargetType="ToggleSwitch"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultToggleSwitch}" />

	<!-- Default native Slider styles -->
	<ios:Style x:Key="NativeDefaultSlider"
			   TargetType="Slider">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Slider">
					<!-- Value must be defined last, as UISlider's default MinValue is 0 and MaxValue is 1 -->
					<ios:BindableUISlider MinValue="{TemplateBinding Minimum}"
									  MaxValue="{TemplateBinding Maximum}"
									  Value="{TemplateBinding Value, Mode=TwoWay}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<android:Style x:Key="NativeDefaultSlider"
				   TargetType="Slider">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Slider">
					<!-- Value must be defined last, as UISlider's default MinValue is 0 and MaxValue is 1 -->
					<android:BindableSeekBar Maximum="{TemplateBinding Maximum}"
									 Minimum="{TemplateBinding Minimum}"
									 Value="{TemplateBinding Value, Mode=TwoWay}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<wasm:Style
		x:Key="NativeDefaultSlider"
		TargetType="Slider"
		BasedOn="{StaticResource XamlDefaultSlider}" />

	<skia:Style
		x:Key="NativeDefaultSlider"
		TargetType="Slider"
		BasedOn="{StaticResource XamlDefaultSlider}" />

	<macos:Style
		x:Key="NativeDefaultSlider"
		TargetType="Slider"
		BasedOn="{StaticResource XamlDefaultSlider}" />

	<not_win:Style
		BasedOn="{StaticResource NativeDefaultSlider}"
		not_win:IsNativeStyle="True"
		TargetType="Slider" />

	<converters:UnoNativeDefaultProgressBarReverseBoolConverter x:Key="nativeDefaultProgressBarReverseBool" />

	<!-- Default native ProgressBar styles -->
	<ios:Style x:Key="NativeDefaultProgressBar"
			   TargetType="ProgressBar">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ProgressBar">
					<Grid>
						<Grid.Resources>
						</Grid.Resources>
						<legacy:ProgressRing IsActive="{TemplateBinding IsIndeterminate}"
											 Foreground="{TemplateBinding Foreground}"
											 Hidden="{TemplateBinding IsIndeterminate, Converter={StaticResource nativeDefaultProgressBarReverseBool}}" />
						<ios:BindableUIProgressView IsActive="{TemplateBinding IsIndeterminate}"
												Progress="{TemplateBinding ActualValue}"
												Foreground="{TemplateBinding Foreground}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<android:Style x:Key="NativeDefaultProgressBar"
				   TargetType="ProgressBar">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ProgressBar">
					<Grid>
						<android:BindableProgressBar Indeterminate="{TemplateBinding IsIndeterminate}"
											 Progress="{TemplateBinding ActualValue}"
											 Max="{TemplateBinding Max}"
											 Foreground="{TemplateBinding Foreground}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<wasm:Style
		x:Key="NativeDefaultProgressBar"
		TargetType="ProgressBar" />

	<skia:Style
		x:Key="NativeDefaultProgressBar"
		TargetType="ProgressBar" />

	<macos:Style
		x:Key="NativeDefaultProgressBar"
		TargetType="ProgressBar" />

	<not_win:Style
		TargetType="ProgressBar"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultProgressBar}" />

	<!-- Default native TextBox styles -->
	<not_win:Style x:Key="NativeDefaultTextBox"
				   TargetType="TextBox">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TextBox">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<ContentPresenter x:Name="HeaderContentPresenter"
										  x:DeferLoadStrategy="Lazy"
										  Visibility="Collapsed"
										  Grid.Row="0"
										  Foreground="{ThemeResource SystemControlForegroundBaseHighBrush}"
										  Margin="0,0,0,8"
										  Grid.ColumnSpan="2"
										  Content="{TemplateBinding Header}"
										  ContentTemplate="{TemplateBinding HeaderTemplate}"
										  FontWeight="Normal" />
						<ContentControl x:Name="ContentElement"
										Grid.Row="1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</not_win:Style>

	<not_wasm:Style BasedOn="{StaticResource NativeDefaultTextBox}"
					not_win:IsNativeStyle="True"
					TargetType="TextBox" />

	<!-- Default native Pivot styles -->
	<not_win:Style x:Key="NativeDefaultPivot"
				   TargetType="Pivot">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Pivot">
					<NativePivotPresenter x:Name="NativePresenter" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</not_win:Style>

	<!-- Default native Pivot styles -->
	<ios:Style TargetType="NativePivotPresenter">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Pivot">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="1*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<Grid x:Name="PART_Content"
							  Grid.Row="0" />
						<ios:UITabBar Grid.Row="1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<android:Style TargetType="NativePivotPresenter">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Pivot">
					<ExtendedViewPager OffscreenPageLimit="1"
									   SwipeEnabled="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<not_wasm:Style
		TargetType="Pivot"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultPivot}" />

	<wasm:Style
		TargetType="Pivot"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource XamlDefaultPivot}" />

	<ios:Style x:Key="NativeDefaultCommandBar"
				TargetType="CommandBar">
		<Setter Property="Background"
				Value="{x:Null}" />
		<Setter Property="Foreground"
				Value="{x:Null}" />
		<Setter Property="uBehaviors:InternalVisibleBoundsPadding.PaddingMask"
				Value="Top" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<Border BorderThickness="{TemplateBinding Padding}">
						<!-- TODO: 1px line -->
						<ios:NativeCommandBarPresenter Height="44" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<android:Style x:Key="NativeDefaultCommandBar"
				   TargetType="CommandBar">
		<Setter Property="Background"
				Value="{x:Null}" />
		<Setter Property="Foreground"
				Value="{x:Null}" />
		<Setter Property="uBehaviors:InternalVisibleBoundsPadding.PaddingMask"
				Value="Top" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<android:NativeCommandBarPresenter />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<wasm:Style
		x:Key="NativeDefaultCommandBar"
		TargetType="CommandBar"
		BasedOn="{StaticResource XamlDefaultCommandBar}" />

	<skia:Style
		x:Key="NativeDefaultCommandBar"
		TargetType="CommandBar"
		BasedOn="{StaticResource XamlDefaultCommandBar}" />

	<macos:Style
		x:Key="NativeDefaultCommandBar"
		TargetType="CommandBar"
		BasedOn="{StaticResource XamlCommandBar}" />

	<not_win:Style
		TargetType="CommandBar"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultCommandBar}" />

	<ios:Style x:Key="NativeDefaultAppBarButton"
			   TargetType="AppBarButton">
		<Setter Property="Background"
				Value="Transparent" />
		<ios:Setter Property="Foreground"
					Value="{x:Null}" />
	</ios:Style>

	<android:Style x:Key="NativeDefaultAppBarButton"
				   TargetType="AppBarButton">
		<Setter Property="Background"
				Value="Transparent" />
		<ios:Setter Property="Foreground"
					Value="{x:Null}" />
	</android:Style>

	<wasm:Style
		x:Key="NativeDefaultAppBarButton"
		TargetType="AppBarButton"
		BasedOn="{StaticResource XamlAppBarButton}" />

	<skia:Style
		x:Key="NativeDefaultAppBarButton"
		TargetType="AppBarButton"
		BasedOn="{StaticResource XamlAppBarButton}" />

	<macos:Style
		x:Key="NativeDefaultAppBarButton"
		TargetType="AppBarButton"
		BasedOn="{StaticResource XamlAppBarButton}" />

	<not_win:Style
		TargetType="AppBarButton"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultAppBarButton}" />

	<!-- Default native Frame styles -->
	<ios:Style x:Key="NativeDefaultFrame"
			   TargetType="Frame">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Frame">
					<ios:NativeFramePresenter Background="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>


	<!-- Default native Frame styles -->
	<android:Style x:Key="NativeDefaultFrame"
				   TargetType="Frame">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Frame">
					<android:NativeFramePresenter Background="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<!-- Default native Frame styles -->
	<wasm:Style
		x:Key="NativeDefaultFrame"
		TargetType="Frame"
				BasedOn="{StaticResource XamlDefaultFrame}" />
	<skia:Style
		x:Key="NativeDefaultFrame"
		TargetType="Frame"
				BasedOn="{StaticResource XamlDefaultFrame}" />

	<macos:Style
		x:Key="NativeDefaultFrame"
		TargetType="Frame"
				BasedOn="{StaticResource XamlDefaultFrame}" />

	<!-- Default native Frame styles -->
	<IS_UNIT_TESTS:Style x:Key="NativeDefaultFrame"
				TargetType="Frame"
				BasedOn="{StaticResource XamlDefaultFrame}" />

	<not_win:Style
		TargetType="Frame"
		not_win:IsNativeStyle="True"
		BasedOn="{StaticResource NativeDefaultFrame}" />

	<!--
		Official recommendation:
		"Side nav width: Equal to the screen width minus the height of the action bar."
		Source: https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs

		Current approximation:
		- Most small devices sold now have a screen width of 360dp.
		- The action bar has a height of 56dp on most phones.
		Value: 360 - 56 = 304

		TODO: Calculate programmatically.
	-->
	<android:Double x:Key="NativeDefaultSplitViewOpenPaneLength">304</android:Double>

	<android:Style x:Key="LeftDrawerSplitViewStyle"
				   TargetType="SplitView">
		<Setter Property="OpenPaneLength"
				Value="{StaticResource NativeDefaultSplitViewOpenPaneLength}" />
		<Setter Property="PaneBackground"
				Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="SplitView">
					<android:BindableDrawerLayout LeftPaneOpenLength="{TemplateBinding OpenPaneLength}"
										  LeftPane="{TemplateBinding Pane}"
										  LeftPaneBackground="{TemplateBinding PaneBackground}"
										  IsLeftPaneOpen="{TemplateBinding IsPaneOpen, Mode=TwoWay}"
										  IsLeftPaneEnabled="{Binding (toolkit:SplitViewExtensions.IsPaneEnabled), RelativeSource={RelativeSource TemplatedParent}}"
										  Content="{TemplateBinding Content}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<android:Style x:Key="RightDrawerSplitViewStyle"
				   TargetType="SplitView">
		<Setter Property="OpenPaneLength"
				Value="{StaticResource NativeDefaultSplitViewOpenPaneLength}" />
		<Setter Property="PaneBackground"
				Value="White" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="SplitView">
					<android:BindableDrawerLayout RightPaneOpenLength="{TemplateBinding OpenPaneLength}"
										  RightPane="{TemplateBinding Pane}"
										  RightPaneBackground="{TemplateBinding PaneBackground}"
										  IsRightPaneOpen="{TemplateBinding IsPaneOpen, Mode=TwoWay}"
										  IsRightPaneEnabled="{Binding (toolkit:SplitViewExtensions.IsPaneEnabled), RelativeSource={RelativeSource TemplatedParent}}"
										  Content="{TemplateBinding Content}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>


	<!--#region DatePicker/TimePicker Styles and Resources-->

	<!-- DatePicker/TimePicker shared resources -->
	<ios:Style x:Key="IosPickerFlyoutTextButtonStyle"
			   TargetType="Button">
		<Setter Property="FontSize"
				Value="14" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="Foreground"
				Value="#007AFF" />
		<Setter Property="Margin"
				Value="15,0" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<TextBlock Text="{TemplateBinding Content}"
							   FontSize="{TemplateBinding FontSize}"
							   Foreground="{TemplateBinding Foreground}"
							   Background="{TemplateBinding Background}"
							   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<!-- DatePicker -->
	<ios:Style TargetType="NativeDatePickerFlyoutPresenter">
		<Setter Property="Background"
				Value="{ThemeResource TimePickerFlyoutPresenterBackground}" />
		<Setter Property="VerticalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalContentAlignment"
				Value="Stretch" />
		<Setter Property="VerticalContentAlignment"
				Value="Bottom" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="NativeDatePickerFlyoutPresenter">
					<Grid x:Name="ContentPanel"
						  Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<Grid Grid.Row="0"
							  x:Name="AcceptDismissHostGrid"
							  Height="44"
							  uBehaviors:InternalVisibleBoundsPadding.PaddingMask="Left">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<Button Grid.Column="0"
									x:Name="DismissButton"
									x:Uid="DatePickerFlyoutDismissButton"
									Content="Cancel"
									HorizontalAlignment="Left"
									Style="{StaticResource IosPickerFlyoutTextButtonStyle}" />

							<Button Grid.Column="2"
									x:Name="AcceptButton"
									x:Uid="DatePickerFlyoutAcceptButton"
									Content="Done"
									FontWeight="Bold"
									HorizontalAlignment="Right"
									Style="{StaticResource IosPickerFlyoutTextButtonStyle}" />
						</Grid>

						<ContentPresenter Grid.Row="1"
										  Content="{TemplateBinding Content}"
										  Foreground="{TemplateBinding Foreground}"
										  HorizontalAlignment="Stretch"
										  VerticalAlignment="Stretch"
										  HorizontalContentAlignment="Stretch"
										  VerticalContentAlignment="Stretch" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>
	<ios:Style TargetType="DatePickerSelector">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DatePickerSelector">
					<native_ios:UIDatePicker />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<!-- TimePicker -->
	<android:Style TargetType="NativeTimePickerFlyoutPresenter">
		<Setter Property="VerticalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="FlyoutPresenter">
					<Grid>
						<Border HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								IsHitTestVisible="False"
								Opacity="0.50"
								Background="Black" />
						<ContentPresenter Content="{TemplateBinding Content}" />

					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>
	<ios:Style TargetType="NativeTimePickerFlyoutPresenter">
		<Setter Property="Background"
				Value="{ThemeResource TimePickerFlyoutPresenterBackground}" />
		<Setter Property="VerticalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="HorizontalContentAlignment"
				Value="Stretch" />
		<Setter Property="VerticalContentAlignment"
				Value="Bottom" />
		<Setter Property="BorderThickness"
				Value="0" />
		<Setter Property="IsTabStop"
				Value="False" />
		<Setter Property="AutomationProperties.AutomationId"
				Value="TimePickerFlyoutPresenter" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TimePickerFlyoutPresenter">
					<Grid x:Name="ContentPanel"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>

						<Grid Grid.Row="0"
							  x:Name="AcceptDismissHostGrid"
							  Height="44"
							  uBehaviors:InternalVisibleBoundsPadding.PaddingMask="Left">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<Button Grid.Column="0"
									x:Name="DismissButton"
									x:Uid="TimePickerFlyoutDismissButton"
									Content="Cancel"
									HorizontalAlignment="Left"
									Style="{StaticResource IosPickerFlyoutTextButtonStyle}" />

							<Button Grid.Column="2"
									x:Name="AcceptButton"
									x:Uid="TimePickerFlyoutAcceptButton"
									Content="Done"
									FontWeight="Bold"
									HorizontalAlignment="Right"
									Style="{StaticResource IosPickerFlyoutTextButtonStyle}" />
						</Grid>

						<ContentPresenter Grid.Row="1"
										  Content="{TemplateBinding Content}"
										  Foreground="{TemplateBinding Foreground}"
										  HorizontalAlignment="Stretch"
										  VerticalAlignment="Stretch"
										  HorizontalContentAlignment="Stretch"
										  VerticalContentAlignment="Stretch" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<not_win:Style TargetType="TimePickerSelector">
		<ios:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TimePickerSelector">
					<ContentControl HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									HorizontalContentAlignment="Stretch"
									VerticalContentAlignment="Stretch">
						<native_ios:UIDatePicker />
					</ContentControl>
				</ControlTemplate>
			</Setter.Value>
		</ios:Setter>
		<android:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TimePickerSelector">
					<Border Background="White"
							VerticalAlignment="Center"
							HorizontalAlignment="Center">
						<native_android:TimePicker />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</android:Setter>
	</not_win:Style>

	<!--#endregion-->

</ResourceDictionary>
