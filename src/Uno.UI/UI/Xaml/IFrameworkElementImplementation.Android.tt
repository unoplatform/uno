<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

#pragma warning disable 108
#pragma warning disable 109 // The member does not hide an accessible member. The new keyword is not required.

using Android.Runtime;
using Android.Views;
using Android.Views.Accessibility;
using Uno.Diagnostics.Eventing;
using Uno.Disposables;
using Uno.Extensions;
using Uno.Foundation.Logging;
using Uno.UI;
using Uno.UI.DataBinding;
using Uno.UI.Extensions;
using Uno.UI.Helpers;
using Uno.UI.Media;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Windows.Foundation;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Automation;
using Microsoft.UI.Xaml.Automation.Peers;
using Microsoft.UI.Xaml.Automation.Provider;
using Microsoft.UI.Xaml.Data;
using Microsoft.UI.Xaml.Media;
using Microsoft.UI.Xaml.Media.Animation;
using global::Microsoft.UI.Xaml.Input;
using Point = Windows.Foundation.Point;
using Action = global::System.Action;
using Uno.UI.Xaml;

<#
	foreach(var mixin in _mixins) {
#>

namespace <#= mixin.NamespaceName #>
{
	partial class <#= mixin.ClassName #> : IFrameworkElement, IXUidProvider, IFrameworkElementInternal
	{
		private readonly static IEventProvider _trace = Tracing.Get(FrameworkElement.TraceProvider.Id);

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		public event DependencyPropertyChangedEventHandler IsEnabledChanged;
#endif

		public event TypedEventHandler<FrameworkElement, object> Loading;

		public event RoutedEventHandler Loaded;

		public event RoutedEventHandler Unloaded;

		public event SizeChangedEventHandler SizeChanged;

		string IXUidProvider.Uid { get; set; }

		bool IFrameworkElementInternal.HasLayouter => <#= mixin.HasLayouter #>;

		public object FindName(string name)
		{
			var viewGroup = ((object)this) as ViewGroup;

			if (viewGroup != null)
			{
				return IFrameworkElementHelper.FindName(this, viewGroup, name);
			}
			else
			{
				return null;
			}
		}

		partial void AdjustArrangePartial(ref Size size);

		Size IFrameworkElement.AdjustArrange(Size size)
		{
			AdjustArrangePartial(ref size);

			return size;
		}

		public double ActualWidth => GetActualWidth();
		public double ActualHeight => GetActualHeight();

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		private protected virtual double GetActualWidth() => _actualSize.Width;
		private protected virtual double GetActualHeight() => _actualSize.Height;
#endif

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		/// <summary>
		/// Gets the parent of this FrameworkElement in the object tree.
		/// </summary>
		public new DependencyObject Parent => ((IDependencyObjectStoreProvider)this).Store.Parent as DependencyObject;

		// This is also defined in UIElement for actual UIElement hierarchy
		internal bool IsRenderingSuspended { get; set; }

		public event EventHandler<object> LayoutUpdated;

		internal virtual void OnLayoutUpdated()
		{
			if (LayoutUpdated != null)
			{
				LayoutUpdated(this, new RoutedEventArgs(this));
			}
		}
#endif

		internal void SuspendRendering()
		{
			if(!IsRenderingSuspended)
			{
				IsRenderingSuspended = true;

				Alpha = 0;
				SuspendBindings();
			}
		}

		internal void ResumeRendering()
		{
			if(IsRenderingSuspended)
			{
				IsRenderingSuspended = false;

				Alpha = (float)Opacity;
				ResumeBindings();
			}
		}

		/// <summary>
		/// An optional render phase, see x:Bind.
		/// </summary>
		public int? RenderPhase { get; set; }

		public void ApplyBindingPhase(int phase)
		{
			void ApplyChildren()
			{
				if(this is Uno.UI.Controls.IShadowChildrenProvider provider)
				{
					foreach (var child in provider.ChildrenShadow)
					{
						(child as IFrameworkElement)?.ApplyBindingPhase(phase);
					}
				}
			}

			if (RenderPhase.HasValue)
			{
				if (RenderPhase <= phase)
				{
					ApplyChildren();
					ResumeRendering();
				}
				else
				{
					SuspendRendering();
				}
			}
			else
			{
				ApplyChildren();
			}
		}

		#region Background Dependency Property

		[GeneratedDependencyProperty(DefaultValue = null, Options=FrameworkPropertyMetadataOptions.ValueInheritsDataContext, ChangedCallback = true)]
		public static DependencyProperty BackgroundProperty { get ; } = CreateBackgroundProperty();

		public new Brush Background
		{
			get => GetBackgroundValue();
			set => SetBackgroundValue(value);
		}

		Action _brushChanged;
		IDisposable _backgroundBrushChangedSubscription;

		protected virtual void OnBackgroundChanged(DependencyPropertyChangedEventArgs e)
		{
			var newValue = e.NewValue as Brush;

			_backgroundBrushChangedSubscription?.Dispose();
			_backgroundBrushChangedSubscription = Brush.SetupBrushChanged(newValue, ref _brushChanged, () => SetBackgroundColor(Brush.GetFallbackColor(newValue)));
		}
		#endregion

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region Opacity Dependency Property
		public double Opacity
		{
			get { return (double)this.GetValue(OpacityProperty); }
			set { this.SetValue(OpacityProperty, value); }
		}

		// Using a DependencyProperty as the backing store for Opacity.  This enables animation, styling, binding, etc...
		public static DependencyProperty OpacityProperty { get ; } =
			DependencyProperty.Register("Opacity", typeof(double), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(defaultValue: 1.0, propertyChangedCallback: (s, a) => ((<#= mixin.ClassName #>)s).OnOpacityChanged()));

		private void OnOpacityChanged()
		{
			Alpha = IsRenderingSuspended ? 0 : (float)Opacity;
		}
		#endregion

		#region Style DependencyProperty

		public Style Style
		{
			get { return (Style)GetValue(StyleProperty); }
			set { SetValue(StyleProperty, value); }
		}

		public static DependencyProperty StyleProperty { get ; } =
			DependencyProperty.Register(
				"Style",
				typeof(Style),
				typeof(<#= mixin.ClassName #>),
				new FrameworkPropertyMetadata(
					defaultValue: null,
					options: FrameworkPropertyMetadataOptions.ValueDoesNotInheritDataContext,
					propertyChangedCallback: (s, e) => ((<#= mixin.ClassName #>)s)?.OnStyleChanged((Style)e.OldValue, (Style)e.NewValue)
				)
			);

		protected virtual void OnStyleChanged(Style oldValue, Style newValue)
		{
			OnStyleChanged(oldValue, newValue, DependencyPropertyValuePrecedences.ExplicitOrImplicitStyle);
		}

		private void OnStyleChanged(Style oldStyle, Style newStyle, DependencyPropertyValuePrecedences precedence)
		{
			if (oldStyle == newStyle)
			{
				// Nothing to do
				return;
			}

			oldStyle?.ClearInvalidProperties(this, newStyle, precedence);

			newStyle?.ApplyTo(this, precedence);
		}

		#endregion

		[EditorBrowsable(EditorBrowsableState.Never)]
		public bool IsParsing { get; set; }

		[EditorBrowsable(EditorBrowsableState.Never)]
		public void CreationComplete()
		{
			IsParsing = false;
		}
#endif

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region IsEnabled Dependency Property

		[GeneratedDependencyProperty(
			DefaultValue = true,
			Options = FrameworkPropertyMetadataOptions.Inherits,
			ChangedCallback = true
		)]
		public static DependencyProperty IsEnabledProperty { get ; } = CreateIsEnabledProperty();

		public virtual bool IsEnabled
		{
			get => GetIsEnabledValue();
			set => SetIsEnabledValue(value);
		}

		private void OnIsEnabledChanged(DependencyPropertyChangedEventArgs e)
		{
			var newValue = (bool)e.NewValue;

#if <#= mixin.IsUnoMotionTarget #> // IsFrameworkElement
			base.SetNativeIsEnabled(newValue);
#endif
			Enabled = newValue;

#if <#= mixin.IsFocusable #> // IsFocusable
			Focusable = newValue;
			FocusableInTouchMode = newValue;
#endif

			IsEnabledChanged?.Invoke(this, e);
		}

		#endregion
#endif

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region IsHitTestVisible Dependency Property

		public bool IsHitTestVisible
		{
			get { return (bool)this.GetValue(IsHitTestVisibleProperty); }
			set { this.SetValue(IsHitTestVisibleProperty, value); }
		}

		public static DependencyProperty IsHitTestVisibleProperty { get ; } =
			DependencyProperty.Register(
				"IsHitTestVisible",
				typeof(bool),
				typeof(<#= mixin.ClassName #>),
				new FrameworkPropertyMetadata(
					true,
					(s, e) => (s as <#= mixin.ClassName #>).OnIsHitTestVisibleChanged((bool)e.OldValue, (bool)e.NewValue)
				)
			);

		protected virtual void OnIsHitTestVisibleChanged(bool oldValue, bool newValue)
		{

		}

#if !<#= mixin.IsUnoMotionTarget #> // IsUnoMotionTarget
		public override bool DispatchTouchEvent(MotionEvent e)
		{
			if (IsHitTestVisible && IsEnabled && HitCheck())
			{
				return base.DispatchTouchEvent(e);
			}

			return false;
		}

		protected virtual bool HitCheck()
		{
			var hitCheck = true;
			HitCheckOverridePartial(ref hitCheck);

			return hitCheck;
		}
#endif

		partial void HitCheckOverridePartial(ref bool hitCheck);

		#endregion
#endif

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region Visibility Dependency Property

		public static DependencyProperty VisibilityProperty { get ; } =
			DependencyProperty.Register(
				"Visibility",
				typeof(Visibility),
				typeof(<#= mixin.ClassName #>),
				new FrameworkPropertyMetadata(
					Visibility.Visible,
					(s, e) => (s as <#= mixin.ClassName #>).OnVisibilityChanged((Visibility)e.OldValue, (Visibility)e.NewValue)
				)
			);

		protected virtual void OnVisibilityChanged(Visibility oldValue, Visibility newValue)
		{
			var newNativeVisibility = newValue == Visibility.Visible ? Android.Views.ViewStates.Visible : Android.Views.ViewStates.Gone;

			var bindableView = ((object)this) as Uno.UI.Controls.BindableView;

			if (bindableView != null)
			{
				// This cast is different for performance reasons. See the
				// UnoViewGroup java class for more details.
				bindableView.Visibility = newNativeVisibility;
				bindableView.RequestLayout();
			}
			else
			{
				((View)this).Visibility = newNativeVisibility;
				((View)this).RequestLayout();
			}

			OnVisibilityChangedPartial(oldValue, newValue);

		}

		partial void OnVisibilityChangedPartial(Visibility oldValue, Visibility newValue);

		public new Visibility Visibility
		{
			get { return (Visibility)this.GetValue(VisibilityProperty); }
			set { this.SetValue(VisibilityProperty, value); }
		}

		#endregion
#endif

		#region Name Dependency Property

		private void OnNameChanged(string oldValue, string newValue)
		{
			if (FrameworkElementHelper.IsUiAutomationMappingEnabled)
			{
				Microsoft.UI.Xaml.Automation.AutomationProperties.SetAutomationId(this, newValue);
			}
		}

		[GeneratedDependencyProperty(DefaultValue = "", ChangedCallback = true)]
		public static DependencyProperty NameProperty { get ; } = CreateNameProperty();

		public virtual string Name
		{
			get => GetNameValue();
			set => SetNameValue(value);
		}
		#endregion

		#region Margin Dependency Property
		[GeneratedDependencyProperty(ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MarginProperty { get ; } = CreateMarginProperty();

		public Thickness Margin
		{
			get => GetMarginValue();
			set => SetMarginValue(value);
		}
		private static Thickness GetMarginDefaultValue() => Thickness.Empty;
		#endregion

		#region HorizontalAlignment Dependency Property
		[GeneratedDependencyProperty(DefaultValue = HorizontalAlignment.Stretch, Options = FrameworkPropertyMetadataOptions.AffectsArrange, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty HorizontalAlignmentProperty { get ; } = CreateHorizontalAlignmentProperty();

		public HorizontalAlignment HorizontalAlignment
		{
			get => GetHorizontalAlignmentValue();
			set => SetHorizontalAlignmentValue(value);
		}
		#endregion

		#region VerticalAlignment Dependency Property
		[GeneratedDependencyProperty(DefaultValue = HorizontalAlignment.Stretch, Options = FrameworkPropertyMetadataOptions.AffectsArrange, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty VerticalAlignmentProperty { get ; } = CreateVerticalAlignmentProperty();

		public VerticalAlignment VerticalAlignment
		{
			get => GetVerticalAlignmentValue();
			set => SetVerticalAlignmentValue(value);
		}
		#endregion

		#region Width Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.NaN, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty WidthProperty { get ; } = CreateWidthProperty();

		public <#= mixin.HasNewWidthHeight #> double Width
		{
			get => GetWidthValue();
			set => SetWidthValue(value);
		}
		#endregion

		#region Height Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.NaN, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty HeightProperty { get ; } = CreateHeightProperty();

		public <#= mixin.HasNewWidthHeight #> double Height
		{
			get => GetHeightValue();
			set => SetHeightValue(value);
		}
		#endregion

		#region MinWidth Dependency Property
		[GeneratedDependencyProperty(DefaultValue = 0.0, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MinWidthProperty { get ; } = CreateMinWidthProperty();

		public <#= mixin.HasNewMinWidthHeight #> double MinWidth
		{
			get => GetMinWidthValue();
			set => SetMinWidthValue(value);
		}
		#endregion

		#region MinHeight Dependency Property
		[GeneratedDependencyProperty(DefaultValue = 0.0, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MinHeightProperty { get ; } = CreateMinHeightProperty();

		public <#= mixin.HasNewMinWidthHeight #> double MinHeight
		{
			get => GetMinHeightValue();
			set => SetMinHeightValue(value);
		}
		#endregion

		#region MaxWidth Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.PositiveInfinity, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MaxWidthProperty { get ; } = CreateMaxWidthProperty();

		public <#= mixin.HasNewMaxWidthHeight #> double MaxWidth
		{
			get => GetMaxWidthValue();
			set => SetMaxWidthValue(value);
		}
		#endregion

		#region MaxHeight Dependency Property
		[GeneratedDependencyProperty(DefaultValue = double.PositiveInfinity, Options=FrameworkPropertyMetadataOptions.AutoConvert, ChangedCallbackName = nameof(OnGenericPropertyUpdated))]
		public static DependencyProperty MaxHeightProperty { get ; } = CreateMaxHeightProperty();

		public <#= mixin.HasNewMaxWidthHeight #> double MaxHeight
		{
			get => GetMaxHeightValue();
			set => SetMaxHeightValue(value);
		}
		#endregion

		#region Transitions Dependency Property

		public TransitionCollection Transitions
		{
			get { return (TransitionCollection)this.GetValue(TransitionsProperty); }
			set { this.SetValue(TransitionsProperty, value); }
		}

		public static DependencyProperty TransitionsProperty { get ; } =
			DependencyProperty.Register("Transitions", typeof(TransitionCollection), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(null, OnTransitionsChanged));

		private static void OnTransitionsChanged(object dependencyObject, DependencyPropertyChangedEventArgs args)
		{
			var frameworkElement = dependencyObject as IFrameworkElement;

			if (frameworkElement != null)
			{
				var oldValue = (TransitionCollection)args.OldValue;

				if (oldValue != null)
				{
					foreach (var item in oldValue)
					{
						item.DetachFromElement(frameworkElement);
					}
				}

				var newValue = (TransitionCollection)args.NewValue;

				if (newValue != null)
				{
					foreach (var item in newValue)
					{
						item.AttachToElement(frameworkElement);
					}
				}
			}
		}
		#endregion

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		#region Tag Dependency Property

		public new object Tag
		{
			get { return this.GetValue(TagProperty); }
			set { this.SetValue(TagProperty, value); }
		}

		public static DependencyProperty TagProperty { get ; } =
			DependencyProperty.Register("Tag", typeof(object), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(null, (s, e) => (s as <#= mixin.ClassName #>).OnTagChanged(e)));

		private void OnTagChanged(DependencyPropertyChangedEventArgs e)
		{
		}

		#endregion

		#region RenderTransform Dependency Property

		/// <summary>
		/// This is a Transformation for a UIElement.  It binds the Render Transform to the View
		/// </summary>
		public Transform RenderTransform
		{
			get => (Transform)this.GetValue(RenderTransformProperty);
			set => this.SetValue(RenderTransformProperty, value);
		}

		/// <summary>
		/// Backing dependency property for <see cref="RenderTransform"/>
		/// </summary>
		public static DependencyProperty RenderTransformProperty { get ; } =
			DependencyProperty.Register("RenderTransform", typeof(Transform), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(null, OnRenderTransformChanged));

		private static void OnRenderTransformChanged(object dependencyObject, DependencyPropertyChangedEventArgs args)
		{
			var view = (<#= mixin.ClassName #>)dependencyObject;

			view._renderTransform?.Dispose();

			if (args.NewValue is Transform transform)
			{
				view._renderTransform = new NativeRenderTransformAdapter(view, transform, view.RenderTransformOrigin);
				view.OnRenderTransformSet();
			}
			else
			{
				// Sanity
				view._renderTransform = null;
			}
		}

		private NativeRenderTransformAdapter _renderTransform;
		private bool _renderTransformRegisteredParentChanged;
		private static void RenderTransformOnParentChanged(object dependencyObject, object _, DependencyObjectParentChangedEventArgs args)
			=> ((<#= mixin.ClassName #>)dependencyObject)._renderTransform?.UpdateParent(args.PreviousParent, args.NewParent);
		private void OnRenderTransformSet()
		{
			// On first Transform set, we register to the parent changed, so we can enable or disable the static transformations on it
			if (!_renderTransformRegisteredParentChanged)
			{
				((IDependencyObjectStoreProvider)this).Store.RegisterSelfParentChangedCallback(RenderTransformOnParentChanged);
				_renderTransformRegisteredParentChanged = true;
			}
		}
		#endregion

		#region RenderTransformOrigin Dependency Property

		/// <summary>
		/// This is a Transformation for a UIElement.  It binds the Render Transform to the View
		/// </summary>
		public Point RenderTransformOrigin
		{
			get => (Point)this.GetValue(RenderTransformOriginProperty);
			set => this.SetValue(RenderTransformOriginProperty, value);
		}

		/// <summary>
		/// Backing dependency property for <see cref="RenderTransformOrigin"/>
		/// </summary>
		public static DependencyProperty RenderTransformOriginProperty { get ; } =
			DependencyProperty.Register("RenderTransformOrigin", typeof(Point), typeof(<#= mixin.ClassName #>), new FrameworkPropertyMetadata(default(Point), OnRenderTransformOriginChanged));

		private static void OnRenderTransformOriginChanged(object dependencyObject, DependencyPropertyChangedEventArgs args)
		{
			var view = ((<#= mixin.ClassName #>)dependencyObject);
			var point = (Point)args.NewValue;

			view._renderTransform?.UpdateOrigin(point);
		}

		#endregion
#endif

		/// <summary>
		/// Determines if the view is currently loaded (attached to the a window)
		/// </summary>
		public bool IsLoaded { get; private set;}

		private protected virtual void OnPostLoading() {}

		internal virtual void OnLoading()
		{
			OnLoadingPartial();
			Loading?.Invoke(<#= mixin.LoadingInvokeArgument #>, null);
			OnPostLoading();
		}

		partial void OnLoadingPartial();

		private protected virtual void OnLoaded()
		{
			IsLoaded = true;

			OnLoadedPartial();

			Loaded?.Invoke(this, new RoutedEventArgs(this));
		}

		partial void OnLoadedPartial();

		private protected virtual void OnUnloaded()
		{
			IsLoaded = false;

			OnUnloadedPartial();

			Unloaded?.Invoke(this, new RoutedEventArgs(this));
		}

		partial void OnUnloadedPartial();

		private void OnGenericPropertyUpdated(DependencyPropertyChangedEventArgs args)
		{
#if <#= mixin.IsFrameworkElement #> // IsFrameworkElement
			OnGenericPropertyUpdatedPartial(args);
#endif
			this.InvalidateMeasure();
		}

#if <#= mixin.OverridesOnLayout #> // OverridesOnLayout
		private Size _actualSize;
		protected override void OnLayout(bool changed, int left, int top, int right, int bottom)
		{
			var newSize = new Size(right - left, bottom - top).PhysicalToLogicalPixels();
			var previousSize = _actualSize;

#if <#= mixin.CallsBaseOnLayout #> // CallsBaseOnLayout
			base.OnLayout(changed, left, top, right, bottom);
#endif

			OnLayoutPartial(changed, left, top, right, bottom);

			_actualSize = newSize;

			if (newSize != previousSize)
			{
				SizeChanged?.Invoke(this, new SizeChangedEventArgs(this, previousSize, newSize));
				_renderTransform?.UpdateSize(newSize); // TODO: Move ** BEFORE ** base.OnLayout() ???
			}
		}

		partial void OnLayoutPartial(bool changed, int left, int top, int right, int bottom);
#endif

#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		private static readonly Uri _defaultUri = new Uri("ms-appx:///");
		public Uri BaseUri { get; internal set; } = _defaultUri;
#endif

		#region AutomationPeer

		private AutomationPeer _automationPeer;

#if !<#= mixin.HasAutomationPeer #> // HasAutomationPeer
		private AutomationPeer OnCreateAutomationPeerOverride()
		{
			return null;
		}

		private string GetAccessibilityInnerTextOverride()
		{
			return null;
		}
#endif

		protected
#if !<#= mixin.IsFrameworkElement #> // IsFrameworkElement
		virtual
#else
		override
#endif
		AutomationPeer OnCreateAutomationPeer()
		{
			if (OnCreateAutomationPeerOverride() is AutomationPeer automationPeer)
			{
				return automationPeer;
			}

			if (AutomationProperties.GetName(this) is string name && !string.IsNullOrEmpty(name))
			{
				return new FrameworkElementAutomationPeer(this);
			}

			return null;
		}

		public virtual string GetAccessibilityInnerText()
		{
			if (GetAccessibilityInnerTextOverride() is string innerText)
			{
				return innerText;
			}

			return null;
		}

		public AutomationPeer GetAutomationPeer()
		{
			if (_automationPeer == null)
			{
				_automationPeer = OnCreateAutomationPeer();
			}

			return _automationPeer;
		}

		public override void OnInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info)
		{
			base.OnInitializeAccessibilityNodeInfo(info);
			GetAutomationPeer()?.OnInitializeAccessibilityNodeInfo(info);
		}

		public override void SendAccessibilityEvent([GeneratedEnum] EventTypes eventType)
		{
			base.SendAccessibilityEvent(eventType);
			GetAutomationPeer()?.SendAccessibilityEvent(eventType);
		}

		#endregion
	}
}
<#
 }
#>

<#+
	public void AddClass(
		string namespaceName,
		string className,
		bool hasNewWidthHeight = true,
		bool hasNewMinWidthHeight = false,
		bool hasNewMaxWidthHeight = false,
		bool overridesAttachedToWindow = false,
		bool isFocusable = false,
		bool isUnoMotionTarget = false,
		bool overridesOnLayout = true,
		bool callsBaseOnLayout = true,
		bool hasAutomationPeer = false,
		bool hasLayouter = false,
		bool derivesFromFrameworkElement = true
	)
	{
		_mixins.Add(
			new MixinParams {
				NamespaceName = namespaceName,
				ClassName = className,
				HasNewWidthHeight = hasNewWidthHeight ? "new" : "",
				HasNewMinWidthHeight = hasNewMinWidthHeight ? "new" : "",
				HasNewMaxWidthHeight = hasNewMaxWidthHeight ? "new" : "",
				OverridesAttachedToWindow = overridesAttachedToWindow ? "true" : "false",
				IsFocusable = isFocusable ? "true" : "false",
				IsUnoMotionTarget = isUnoMotionTarget ? "true" : "false",
				OverridesOnLayout = overridesOnLayout ? "true" : "false",
				IsFrameworkElement = className == "FrameworkElement" ? "true" : "false",
				HasAutomationPeer = hasAutomationPeer ? "true" : "false",
				CallsBaseOnLayout = callsBaseOnLayout ? "true" : "false",
				HasLayouter = hasLayouter ? "true" : "false",
				LoadingInvokeArgument = derivesFromFrameworkElement ? "this" : "null"
			}
		);
	}

	private class MixinParams
	{
		public string NamespaceName;
		public string ClassName;
		public string HasNewWidthHeight;
		public string HasNewMinWidthHeight;
		public string HasNewMaxWidthHeight;
		public string OverridesAttachedToWindow;
		public string IsFocusable;
		public string IsUnoMotionTarget;
		public string OverridesOnLayout;
		public string IsFrameworkElement;
		public string HasAutomationPeer;
		public string CallsBaseOnLayout;
		public string HasLayouter;
		public string LoadingInvokeArgument;
	}

	private List<MixinParams> _mixins = new List<MixinParams>();
#>
