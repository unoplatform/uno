// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class TriggerCollection : global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.TriggerBase>, global::System.Collections.Generic.IEnumerable<global::Microsoft.UI.Xaml.TriggerBase>
	{
		private readonly global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.TriggerBase> _triggers = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.TriggerBase>();

		internal TriggerCollection()
		{
		}

		public uint Size => (uint)_triggers.Count;

		public int Count => _triggers.Count;

		public bool IsReadOnly => false;

		public global::Microsoft.UI.Xaml.TriggerBase this[int index]
		{
			get => _triggers[index];
			set => _triggers[index] = value;
		}

		public void Add(global::Microsoft.UI.Xaml.TriggerBase item)
		{
			_triggers.Add(item);
		}

		public void Clear()
		{
			_triggers.Clear();
		}

		public bool Contains(global::Microsoft.UI.Xaml.TriggerBase item)
		{
			return _triggers.Contains(item);
		}

		public void CopyTo(global::Microsoft.UI.Xaml.TriggerBase[] array, int arrayIndex)
		{
			_triggers.CopyTo(array, arrayIndex);
		}

		public global::System.Collections.Generic.IEnumerator<global::Microsoft.UI.Xaml.TriggerBase> GetEnumerator()
		{
			return _triggers.GetEnumerator();
		}

		public int IndexOf(global::Microsoft.UI.Xaml.TriggerBase item)
		{
			return _triggers.IndexOf(item);
		}

		public void Insert(int index, global::Microsoft.UI.Xaml.TriggerBase item)
		{
			_triggers.Insert(index, item);
		}

		public bool Remove(global::Microsoft.UI.Xaml.TriggerBase item)
		{
			return _triggers.Remove(item);
		}

		public void RemoveAt(int index)
		{
			_triggers.RemoveAt(index);
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			return _triggers.GetEnumerator();
		}
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.GetAt(uint)
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.Size.get
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.GetView()
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.IndexOf(Microsoft.UI.Xaml.TriggerBase, out uint)
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.SetAt(uint, Microsoft.UI.Xaml.TriggerBase)
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.InsertAt(uint, Microsoft.UI.Xaml.TriggerBase)
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.RemoveAt(uint)
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.Append(Microsoft.UI.Xaml.TriggerBase)
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.RemoveAtEnd()
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.Clear()
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.GetMany(uint, Microsoft.UI.Xaml.TriggerBase[])
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.ReplaceAll(Microsoft.UI.Xaml.TriggerBase[])
		// Forced skipping of method Microsoft.UI.Xaml.TriggerCollection.First()
		// Processing: System.Collections.Generic.IList<Microsoft.UI.Xaml.TriggerBase>
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.IndexOf(Microsoft.UI.Xaml.TriggerBase)
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.Insert(int, Microsoft.UI.Xaml.TriggerBase)
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.RemoveAt(int)
		// Skipping already declared indexer Microsoft.UI.Xaml.TriggerCollection.this[int]
		// Processing: System.Collections.Generic.ICollection<Microsoft.UI.Xaml.TriggerBase>
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.Add(Microsoft.UI.Xaml.TriggerBase)
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.Clear()
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.Contains(Microsoft.UI.Xaml.TriggerBase)
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.CopyTo(Microsoft.UI.Xaml.TriggerBase[], int)
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.Remove(Microsoft.UI.Xaml.TriggerBase)
		// Skipping already declared property Microsoft.UI.Xaml.TriggerCollection.Count
		// Skipping already declared property Microsoft.UI.Xaml.TriggerCollection.IsReadOnly
		// Processing: System.Collections.Generic.IEnumerable<Microsoft.UI.Xaml.TriggerBase>
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.GetEnumerator()
		// Processing: System.Collections.IEnumerable
		// Skipping already declared method Microsoft.UI.Xaml.TriggerCollection.System.Collections.IEnumerable.GetEnumerator()
	}
}
