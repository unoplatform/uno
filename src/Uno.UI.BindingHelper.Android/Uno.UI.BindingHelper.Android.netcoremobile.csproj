<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<TargetFrameworks>$(NetAndroidPreviousAndCurrent)</TargetFrameworks>

		<NoWarn>1701;1702;1705;109</NoWarn>

		<!-- generated\src\Java.Interop.__TypeRegistrations.cs(16,6): Error CA1825: Avoid unnecessary zero-length array allocations. -->
		<!-- generated\src\Uno.UI.UnoRecyclerView.cs(168,25): Error CA1812: 'UnoRecyclerViewInvoker' is an internal class that is apparently never instantiated. -->
		<!-- generated\src\Java.Interop.__TypeRegistrations.cs(16,6): Error CA1861: Prefer 'static readonly' fields over constant array arguments if the called method is called repeatedly and is not mutating the passed array -->
		<!-- TODO: Figure out a way to enable these analyzers back and exclude those generated files only -->
		<NoWarn>$(NoWarn);CA1825;CA1812;CA1852;CA1861;IDE0051;IDE0055</NoWarn>
		<AssemblyName>Uno.UI.BindingHelper.Android</AssemblyName>

		<ProduceReferenceAssembly>false</ProduceReferenceAssembly>
		<Deterministic>true</Deterministic>

		<IsBindingProject>true</IsBindingProject>
		<_isWindows>$([MSBuild]::IsOsPlatform(Windows))</_isWindows>
	</PropertyGroup>

	<Import Project="../targetframework-override.props" />

	<!--Workaround because this variable is missing by default. See https://github.com/xamarin/xamarin-android/issues/2452 -->
	<PropertyGroup>
		<AndroidSdkBuildToolsVersion Condition="'$(AndroidSdkBuildToolsVersion)' == ''">28.0.3</AndroidSdkBuildToolsVersion>
	</PropertyGroup>

	<!-- This condition isn't always true. -->
	<!-- Docs generation build uses UnoTargetFrameworkOverride=net9.0, so this project will build with net9.0 instead of net9.0-android -->
	<!-- If we attempted to always build with net9.0-android, we will go through the annoyance of installing android workload in docs generation CI job -->
	<ItemGroup Condition="'$(TargetPlatformIdentifier)' == 'android'">
		<PackageReference Include="Xamarin.AndroidX.AppCompat" />
		<PackageReference Include="Xamarin.AndroidX.RecyclerView" />
	</ItemGroup>

	<ItemGroup>
		<_JavaFile Include="Uno\**\*.java" />
	</ItemGroup>

	<ItemGroup>
		<TransformFile Include="Transforms\Metadata.xml">
			<SubType>Designer</SubType>
		</TransformFile>
		<TransformFile Include="Transforms\EnumFields.xml" />
		<TransformFile Include="Transforms\EnumMethods.xml" />
	</ItemGroup>

	<Target Name="_CompileUnoJavaCreateOutputs" BeforeTargets="Build" AfterTargets="Restore">
		<!--
		Create the EmbeddedJar itemgroup here so the Xamarin tooling picks it up,
		but in the obj folder so we don't have rebuild and git ignore issues.
		-->
		<ItemGroup>
			<EmbeddedJar Include="$(IntermediateOutputPath)unojars\uno.ui-$(TargetFramework).jar" />
		</ItemGroup>
	</Target>

	<ItemGroup>
		<!-- This feature does not take androidx dependencies in (yet? https://github.com/xamarin/xamarin-android/blob/3b164b02772a13204ecb244b7be542505d4f2cb6/Documentation/guides/BindingJavaSource.md) -->
		<AndroidJavaSource Remove="Uno\**\*.java" />
	</ItemGroup>

	<Target Name="_CleanJavaGenerated" BeforeTargets="Clean">
		<Message Text="Removing java generated" />
		<ItemGroup>
			<_JavaFilesToDelete Include="$(IntermediateOutputPath)\unojars\**\*.jar" />
			<_JavaFilesToDelete Include="$(IntermediateOutputPath)\unoclasses\**\*.class" />
		</ItemGroup>
		<Delete Files="@(_JavaFilesToDelete)" />
	</Target>

	<ItemGroup>
		<_CompileUnoJavaBeforeTargets Include="ExportJarToXml" />
		<_CompileUnoJavaBeforeTargets Include="GenerateBindings" />
		<_CompileUnoJavaBeforeTargets Include="_GetLibraryImports" />
		<_CompileUnoJavaBeforeTargets Include="ExportJarToXml" />
	</ItemGroup>

	<Target Name="_CompileUnoJava"
			BeforeTargets="@(_CompileUnoJavaBeforeTargets)"
			Inputs="@(_JavaFile)"
			Outputs="@(EmbeddedJar)"
			DependsOnTargets="_ExtractLibraryProjectImports;_CompileUnoJavaCreateOutputs;@(XamarinBuildRestoreResources)">

		<ItemGroup>
			<_AndroidJar Include="%ProgramFiles(x86)%\Reference Assemblies\Microsoft\Framework\MonoAndroid\$(TargetFrameworkVersion)\mono.android.jar" />
			<_AndroidJar Include="$(IntermediateOutputPath)\__library_projects__\Xamarin.Android.Support.Annotations\library_project_imports\support-annotations.jar" />
			<_AndroidJar Include="$(IntermediateOutputPath)\__library_projects__\**\classes.jar" />
			<_AndroidJar Include="$(IntermediateOutputPath)\lp\**\classes.jar" />
		</ItemGroup>
		<PropertyGroup>
			<_JavaVersion>1.8</_JavaVersion>

			<_JavaCBinPath>javac</_JavaCBinPath>
			<_JavaCBinPath Condition="Exists('$(_JavaSdkDirectory)bin\javac.exe')">$(_JavaSdkDirectory)bin\javac.exe</_JavaCBinPath>

			<_JarBinPath>$(_JavaSdkDirectory)bin\jar</_JarBinPath>
			<_JarBinPath Condition="Exists('$(_JavaSdkDirectory)bin\jar.exe')">$(_JavaSdkDirectory)bin\jar.exe</_JarBinPath>

			<_flattenAndroidJar Condition="!$(_isWindows)">@(_AndroidJar, ':')</_flattenAndroidJar>
			<_flattenAndroidJar Condition="$(_isWindows)">@(_AndroidJar)</_flattenAndroidJar>

			<_CompileCommand>"$(_JavaCBinPath)" -g -source $(_javaVersion) -d .\$(IntermediateOutputPath)\unoclasses -target $(_javaVersion) -J-Dfile.encoding=UTF8 -classpath "$(_flattenAndroidJar)" -bootclasspath "$(_AndroidSdkDirectory)platforms\android-$(_AndroidApiLevel)\android.jar" -encoding UTF-8 .\Uno\UI\*.java</_CompileCommand>
			<_CompileCommand Condition="$([MSBuild]::IsOSUnixLike())">$(_CompileCommand.Replace('\','/'))</_CompileCommand>
		</PropertyGroup>

		<Error Text="The Android SDK for API level $(_AndroidApiLevel) is not installed. Install it through the Android SDK manager." Condition="!Exists('$(_AndroidSdkDirectory)platforms\android-$(_AndroidApiLevel)\android.jar')" />

		<Message Text="Compiling java ($(_CurrentSupportV4) for $(TargetFramework)): $(_CompileCommand)" Importance="high" />

		<MakeDir Directories="$(IntermediateOutputPath)\unoclasses" />
		<Exec Command="$(_CompileCommand)" />

		<MakeDir Directories="$(IntermediateOutputPath)\unojars" />
		<Exec Command="&quot;$(_JarBinPath)&quot; cvf @(EmbeddedJar) -C $(IntermediateOutputPath)unoclasses ." />

	</Target>

	<Target Name="_WorkaroundRegisterMdbFilesWithFileWrites" BeforeTargets="IncrementalClean">
		<CreateItem Include="$(OutDir)*.mdb;$(MonoAndroidIntermediateAssemblyDir)*.mdb">
			<Output TaskParameter="Include" ItemName="_FilesToRegister" />
		</CreateItem>
		<CreateItem Include="$([System.IO.Path]::GetFullPath('%(_FilesToRegister.Identity)'))" Condition="Exists('%(_FilesToRegister.Identity)')">
			<Output TaskParameter="Include" ItemName="_CleanCurrentFileWrites" />
		</CreateItem>
	</Target>


</Project>
