<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<UnoUIMSBuildTasksPath Condition="'$(UnoUIMSBuildTasksPath)'==''">Uno.UI.Tasks</UnoUIMSBuildTasksPath>
		<UmbrellaMSBuildTasksImported>true</UmbrellaMSBuildTasksImported>
		
		<_IsXamlTrimmingAvailable>true</_IsXamlTrimmingAvailable>
		<_IsXamlTrimmingAvailable Condition="'$(MSBuildRuntimeType)'!='Core' and !$([MSBuild]::IsOSPlatform('windows'))">false</_IsXamlTrimmingAvailable>
	</PropertyGroup>

	<Import Project="uno.ui.tasks.assets.targets"/>

	<UsingTask AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.LinkerHintsGenerator.LinkerHintGeneratorTask_v0" TaskFactory="TaskHostFactory" />
	<UsingTask AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.LinkerHintsGenerator.LinkerDefinitionMergerTask_v0" TaskFactory="TaskHostFactory" />
	<UsingTask AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.EmbeddedResourceInjector.EmbeddedResourceInjectorTask_v0" TaskFactory="TaskHostFactory" />
	
	<UsingTask Condition="'$(_IsUnoUISolution)'==''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.ResourcesGenerator.ResourcesGenerationTask_v0" />
	<UsingTask Condition="'$(_IsUnoUISolution)'==''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.ResourcesGenerator.UpriFeaturesGeneratorTask_v0" />
	<UsingTask Condition="'$(_IsUnoUISolution)'==''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.ResourcesGenerator.UpriSubstitutionsGeneratorTask_v0" />
	<UsingTask Condition="'$(_IsUnoUISolution)'==''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.Assets.RetargetAssets_v0" />
	<UsingTask Condition="'$(_IsUnoUISolution)'==''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.RuntimeAssetsSelector.RuntimeAssetsSelectorTask_v0" />
	<UsingTask Condition="'$(_IsUnoUISolution)'==''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.RuntimeAssetsValidator.RuntimeAssetsValidatorTask_v0" />

	<UsingTask Condition="'$(_IsUnoUISolution)'!=''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.ResourcesGenerator.ResourcesGenerationTask_v0" TaskFactory="TaskHostFactory"/>
	<UsingTask Condition="'$(_IsUnoUISolution)'!=''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.ResourcesGenerator.UpriFeaturesGeneratorTask_v0" TaskFactory="TaskHostFactory"/>
	<UsingTask Condition="'$(_IsUnoUISolution)'!=''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.ResourcesGenerator.UpriSubstitutionsGeneratorTask_v0" TaskFactory="TaskHostFactory" />
	<UsingTask Condition="'$(_IsUnoUISolution)'!=''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.Assets.RetargetAssets_v0" TaskFactory="TaskHostFactory" />
	<UsingTask Condition="'$(_IsUnoUISolution)'!=''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.RuntimeAssetsSelector.RuntimeAssetsSelectorTask_v0" TaskFactory="TaskHostFactory" />
	<UsingTask Condition="'$(_IsUnoUISolution)'!=''" AssemblyFile="$(UnoUIMSBuildTasksPath)\Uno.UI.Tasks.v0.dll" TaskName="Uno.UI.Tasks.RuntimeAssetsValidator.RuntimeAssetsValidatorTask_v0" TaskFactory="TaskHostFactory" />

	<Target Name="_UnoLangSetup">
		<!-- String resources -->
		<PropertyGroup>
			<!-- LEGACY: Old projects define DefaultApplicationLanguage instead of DefaultLanguage -->
			<DefaultLanguage Condition="'$(DefaultLanguage)'=='' and '$(DefaultApplicationLanguage)'!=''">$(DefaultApplicationLanguage)</DefaultLanguage>
			<!-- Default to English if DefaultLanguage isn't set -->
			<DefaultLanguage Condition="'$(DefaultLanguage)'==''">en</DefaultLanguage>
		</PropertyGroup>
	</Target>

	<PropertyGroup>
		<!--
		Ensures that AssignLinkMetadata runs before AssignTargetPaths.
		Otherwise, AssignTargetPath will generate a rooted path and will break embedded sources
		LogicalName metadata's behavior.
		-->
		<AssignTargetPathsDependsOn>$(AssignTargetPathsDependsOn);AssignLinkMetadata</AssignTargetPathsDependsOn>

		<_UnoUnderlyingPlatform Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">android</_UnoUnderlyingPlatform>
		<_UnoUnderlyingPlatform Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios' OR $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst' OR $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tvos'">uikit</_UnoUnderlyingPlatform>
		<_UnoUnderlyingPlatform Condition="'$(UnoRuntimeIdentifier)'=='WebAssembly'">wasm</_UnoUnderlyingPlatform>
		<_UnoUnderlyingPlatform Condition="'$(_UnoUnderlyingPlatform)'=='' AND '$(UnoRuntimeIdentifier)'=='Skia'">skia</_UnoUnderlyingPlatform>
</PropertyGroup>

	<!--
	  This task transforms all the Content files and PRIResources into resources files compatible for each platform.

	  Note: For Apple UIKit and Android, it must be run early in the build process, but no publicly stable target is available
	  to inject Uno properly. Failing to add this task early enough makes X.A and X.I miss the generated resource files.
	-->
	<Target Name="UnoResourcesGeneration"
				BeforeTargets="_GetLibraryImports;PrepareForBuild;_CheckForContent;_CollectBundleResources;_ComputeAndroidResourcePaths"
				DependsOnTargets="ResolveProjectReferences;_UnoLangSetup"
				Condition="'$(DesignTimeBuild)' != 'true'">

		<CheckForDevenv Condition="'$(SolutionFileName)'=='Uno.UI.sln' and '$(MSBuildRuntimeType)'!='Core'" />

		<PropertyGroup>
			<!-- String resources -->
			<_UnoUnderlyingPlatform Condition="'$(UnoForceProcessPRIResource)'!=''"></_UnoUnderlyingPlatform>

			<!-- Determine UnoHead (with xamarin heads detection) -->
			<_IsUnoHead>false</_IsUnoHead>
			<_IsUnoHead Condition="'$(IsUnoHead)'=='true' or '$(AndroidApplication)'=='true' or '$(ProjectTypeGuids)'!=''">true</_IsUnoHead>
		</PropertyGroup>

		<ItemGroup>
			<_UnoTempPRIResource Include="@(PRIResource)" />
		</ItemGroup>

		<!-- Assign the Link property so files defined in shared projects preserve their natural path structure -->
		<AssignLinkMetadata Items="@(PRIResource)"
							Condition="'@(PRIResource)' != '' and '%(PRIResource.DefiningProjectFullPath)' != '$(MSBuildProjectFullPath)'">
			<Output TaskParameter="OutputItems" ItemName="_Temp" />
		</AssignLinkMetadata>

		<ItemGroup>
			<!-- remove new linked items so their new metadata is used instead -->
			<_UnoTempPRIResource Remove="@(_Temp)" />
			<_UnoTempPRIResource Include="@(_Temp)" />

			<!-- Clear temporary group -->
			<_Temp Remove="@(_Temp)" />
		</ItemGroup>

		<AssignTargetPath Files="@(_UnoTempPRIResource)" RootFolder="$(MSBuildProjectDirectory)">
			<Output TaskParameter="AssignedFiles" ItemName="PRIResourceWithTargetPath" />
		</AssignTargetPath>

		<PropertyGroup>
			<_ResourceOutputPath>$(IntermediateOutputPath)g\ResourcesGenerator</_ResourceOutputPath>
			<_ResourceStampFile>$(IntermediateOutputPath)g\uno.stamp</_ResourceStampFile>
		</PropertyGroup>

		<ResourcesGenerationTask_v0 Resources="@(PRIResourceWithTargetPath)"
									 TargetProjectDirectory="$(ProjectDir)"
									 TargetPlatform="$(_UnoUnderlyingPlatform)"
									 OutputPath="$(_ResourceOutputPath)"
									 DefaultLanguage="$(DefaultLanguage)"
									 IsUnoHead="$(_IsUnoHead)"
									 ProjectName="$(AssemblyName)"
									 EnableTraceLogging="$(UnoResourcesGenerationEnableTraceLogging)">
			<Output TaskParameter="GeneratedFiles"
							ItemName="GeneratedFiles" />
		</ResourcesGenerationTask_v0>
		<ItemGroup>
			<BundleResource Condition="'%(GeneratedFiles.UnoResourceTarget)' =='UIKit'" Include="@(GeneratedFiles)" />
			<_UnoAndroidResources Condition="'%(GeneratedFiles.UnoResourceTarget)' =='Android'" Include="@(GeneratedFiles)" />
			<LibraryResourceDirectories Condition="'@(_UnoAndroidResources->Count ())' != '0' " Include="$(_ResourceOutputPath)\r">
                <StampFile>$(_ResourceStampFile)</StampFile>
            </LibraryResourceDirectories>
			<EmbeddedResource Condition="'%(GeneratedFiles.UnoResourceTarget)' =='Uno'" Include="@(GeneratedFiles)" />

			<!-- Clear temporary group -->
			<_UnoTempPRIResource Remove="@(_UnoTempPRIResource)" />

			<!-- Ensure files are tracked properly for incremental build and clean targets -->
			<FileWrites Include="@(GeneratedFiles)" />
		</ItemGroup>
	</Target>

	<Target Name="_UnoExcludeFromAndroidContentCheck" BeforeTargets="_CheckForContent" Condition="'$(MonoAndroidAssetsPrefix)'!=''">
		<!--
		Disables "XA0101 build action is not supported" as Uno handles Content items explicitly
		https://github.com/xamarin/xamarin-android/blob/311b41e864a0162895d079477cb9398fbec5ca6e/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.targets#L833
		-->
		<ItemGroup>
			<Content Update="@(Content)" ExcludeFromContentCheck="true" />
		</ItemGroup>
	</Target>

	<!-- 
		The UnoAssetsGeneration must be run at design time as well, as it 
		interacts with the `.R` generation on android. If not run, temporary
		resource files may be deleted incorrectly by design time builds.
	-->
	<Target Name="UnoAssetsGeneration"
				BeforeTargets="_GetLibraryImports;_CheckForContent;_CollectBundleResources;_CompileAppManifest;_ComputeAndroidResourcePaths"
				DependsOnTargets="ResolveProjectReferences;GetCopyToOutputDirectoryItems;_UnoLangSetup"
				Condition="
				'$(BuildingInsideUnoSourceGenerator)' == ''
				and ('$(IsUnoHead)'=='true'
					or '$(AndroidApplication)'=='true'
					or '$(ProjectTypeGuids)'!='')">
		<!-- Assets -->
		<PropertyGroup>
			<UseHighDPIResources Condition="'$(UseHighDPIResources)'==''">True</UseHighDPIResources>
			
			<_UnoIosAppManifest>$(AppBundleManifest)</_UnoIosAppManifest>

			<!-- Required for older Xamarin versions -->
			<_UnoIosAppManifest Condition="'$(_UnoIosAppManifest)'==''">$(_AppManifest)</_UnoIosAppManifest>
		</PropertyGroup>
		
		<RetargetAssets_v0 UseHighDPIResources="$(UseHighDPIResources)"
							TargetPlatform="$(_UnoUnderlyingPlatform)"
							DefaultLanguage="$(DefaultLanguage)"
							IntermediateOutputPath="$(IntermediateOutputPath)"
							ContentItems="@(ContentWithTargetPath);@(_SourceItemsToCopyToOutputDirectory)"
							AndroidAssetsPrefix="$(MonoAndroidAssetsPrefix)"
							IosAppManifest="$(_UnoIosAppManifest)"
							Condition="'$(_UnoUnderlyingPlatform)'!=''">
			<Output TaskParameter="Assets"
							ItemName="Assets" />
			<Output TaskParameter="RetargetedAssets"
							ItemName="RetargetedAssets" />
			<Output TaskParameter="PartialAppManifests"
							ItemName="PartialAppManifest" />
		</RetargetAssets_v0>
		<ItemGroup>
			<Content Remove="@(Assets)" />
		</ItemGroup>
		<ItemGroup Condition="'$(_UnoUnderlyingPlatform)'=='uikit'">
			<BundleResource Condition="'%(RetargetedAssets.AssetType)' == 'image'" Include="@(RetargetedAssets)" />
			<BundleResource Condition="'%(RetargetedAssets.AssetType)' == 'generic'" Include="@(RetargetedAssets)" />

			<FileWrites Condition="'%(RetargetedAssets.AssetType)' == 'image'" Include="@(RetargetedAssets)" />
			<FileWrites Condition="'%(RetargetedAssets.AssetType)' == 'generic'" Include="@(RetargetedAssets)" />
		</ItemGroup>
		<ItemGroup Condition="'$(_UnoUnderlyingPlatform)'=='android'">
			<AndroidResource Condition="'%(RetargetedAssets.AssetType)' =='image'" Include="@(RetargetedAssets)" />
			<AndroidAsset Condition="'%(RetargetedAssets.AssetType)' =='generic'" Include="@(RetargetedAssets)" />

			<!-- Ensure files are tracked properly for incremental build and clean targets -->
			<FileWrites Condition="'%(RetargetedAssets.AssetType)' =='image'" Include="@(RetargetedAssets)" />
			<FileWrites Condition="'%(RetargetedAssets.AssetType)' =='generic'" Include="@(RetargetedAssets)" />
		</ItemGroup>
	</Target>

	<!--
	  Upri Resources Trimming
	-->

	<Target Name="_UnoLinkerUpriSubstitutions"
		Condition="'$(DesignTimeBuild)' != 'true'"
		AfterTargets="UnoResourcesGeneration">

		<ItemGroup>
			<_UnoUpriResource Condition="'%(GeneratedFiles.UnoResourceTarget)' == 'Uno'" Include="@(GeneratedFiles->'%(LogicalName)')">
				<Language>%(GeneratedFiles.Language)</Language>
			</_UnoUpriResource>
		</ItemGroup>

		<PropertyGroup>
			<_UnoUpriSubstitutionsFile>$(IntermediateOutputPath)\Substitutions\UpriResources.Substitutions.xml</_UnoUpriSubstitutionsFile>
		</PropertyGroup>

		<UpriSubstitutionsGeneratorTask_v0
			AssemblyName="$(AssemblyName)"
			Resources="@(_UnoUpriResource)"
			EnableXamlTrimmingIntegration="$(UnoXamlResourcesUpriTrimming)"
			OutputFile="$(_UnoUpriSubstitutionsFile)" />

		<ItemGroup>
			<FileWrites Include="$(_UnoUpriSubstitutionsFile)" Condition="Exists('$(_UnoUpriSubstitutionsFile)')" />
		</ItemGroup>

	</Target>

	<Target Name="_UnoLinkerUpriFeatures"
		Condition="'$(IsUnoHead)'=='true'"
		BeforeTargets="BuildDist;PrepareForILLink">

		<UpriFeaturesGeneratorTask_v0
			Languages="@(UnoSupportedLanguage)">
			<Output TaskParameter="OutputFeatures" ItemName="_UpriOutputFeatures" />
		</UpriFeaturesGeneratorTask_v0>

		<ItemGroup>
			<RuntimeHostConfigurationOption Include="@(_UpriOutputFeatures)" Trim="true" />
		</ItemGroup>

	</Target>

	<!--
	  Linker Substitutions Merge
	  -->

	<Target Name="_UnoLinkerCollectSubstitutions"
		Condition="'$(_UnoRequiresEmbeddedResourcesInjection)' == 'true'"
		AfterTargets="CoreCompile">

		<ItemGroup>
			<_SubstitutionFiles Include="@(UnoLinkerSubstitution)" />
			<_SubstitutionFiles Include="$(IntermediateOutputPath)\Substitutions\*.Substitutions.xml" />
		</ItemGroup>

	</Target>

	<Target Name="_UnoLinkerSubstitutionsMerge"
		Condition="'$(_UnoRequiresEmbeddedResourcesInjection)' == 'true' and @(_SubstitutionFiles->Count()) > 0 and '$(Configuration)' == 'Release'"
		BeforeTargets="_UnoEmbeddedResourcesInjection">

		<LinkerDefinitionMergerTask_v0
			DefinitionFiles="@(_SubstitutionFiles)"
			TargetDefinitionFile="$(IntermediateOutputPath)ILLink.Substitutions.xml" />

		<ItemGroup>
			<_UnoInjectedResource Include="$(IntermediateOutputPath)ILLink.Substitutions.xml" LogicalName="ILLink.Substitutions.xml" />

			<FileWrites Include="$(IntermediateOutputPath)ILLink.Substitutions.xml" />
		</ItemGroup>

	</Target>

	<PropertyGroup>
		<TargetsTriggeredByCompilation>$(TargetsTriggeredByCompilation);_UnoSetupEmbeddedResourcesInjection</TargetsTriggeredByCompilation>
	</PropertyGroup>

	<Target Name="_UnoSetupEmbeddedResourcesInjection">

		<PropertyGroup Condition="'$(DesignTimeBuild)' != 'true' and '$(SkipCompilerExecution)' == ''">
			<_UnoRequiresEmbeddedResourcesInjection>true</_UnoRequiresEmbeddedResourcesInjection>
		</PropertyGroup>

	</Target>

	<Target Name="_UnoEmbeddedResourcesInjection"
		Condition="'$(_UnoRequiresEmbeddedResourcesInjection)' == 'true'"
		AfterTargets="Compile;CompileTypeScriptWithTSConfig">

		<ItemGroup>
			<!-- Filter ReferenceCopyLocalPaths as it may contain pdbs as well -->
			<_UnoEmbeddedResourcesInjectionAssembliesForReferencePaths Include="@(ReferencePath)" Condition="'%(Extension)' == '.dll'" />
		</ItemGroup>

		<EmbeddedResourceInjectorTask_v0
			EmbeddedResources="@(_UnoInjectedResource)"
			TargetAssembly="$(IntermediateOutputPath)$(TargetFileName)"
			ReferencePath="@(_UnoEmbeddedResourcesInjectionAssembliesForReferencePaths)" />

	</Target>

	<!--
	  XAML Resources Trimming
	  -->

	<Target Name="_UnoLinkerHintsPass1"
		  Condition="
			'$(IsUnoHead)'=='true'
			and '$(UnoXamlResourcesTrimming)'=='true'
			and $(_IsXamlTrimmingAvailable)"
		  BeforeTargets="BuildDist;PrepareForILLink">

		<Error Condition="'$(ILLinkTasksAssembly)'==''" Text="The property 'ILLinkTasksAssembly' wasn't set. You need to set _RequiresILLinkPack MSBuild property to true, or reference Microsoft.NET.ILLink.Tasks NuGet package with version same as your TargetFramework version." />

		<ItemGroup>
			<!-- Filter ReferenceCopyLocalPaths as it may contain pdbs as well -->
			<_UnoLinkerHintsPass1AssembliesForReferencePaths
					Include="@(ReferencePath)"
					Condition="'%(Extension)' == '.dll'" />
		</ItemGroup>

		<PropertyGroup>
			<_UnoUIPackageBasePath
				Condition="
					'%(UnoRuntimeEnabledPackage.Identity)'=='Uno.UI'
					or '%(UnoRuntimeEnabledPackage.Identity)'=='Uno.WinUI'"
				>%(UnoRuntimeEnabledPackage.PackageBasePath)</_UnoUIPackageBasePath>

			<_UnoLinkerHintGeneratorILLinkerPath Condition="'$(ILLinkTasksAssembly)'!=''">$([System.IO.Path]::GetDirectoryName($(ILLinkTasksAssembly)))\..\net$(TargetFrameworkVersion.Substring(1))</_UnoLinkerHintGeneratorILLinkerPath>
			<_UnoLinkerHintsOutputPath>$([System.IO.Path]::Combine($([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)')),'linkerhints'))</_UnoLinkerHintsOutputPath>
		</PropertyGroup>

		<LinkerHintGeneratorTask_v0
			CurrentProjectPath="$(MSBuildProjectDirectory)"
			AssemblyPath="@(IntermediateAssembly)"
			OutputPath="$(_UnoLinkerHintsOutputPath)"
			ReferencePath="@(_UnoLinkerHintsPass1AssembliesForReferencePaths)"
			ILLinkerPath="$(_UnoLinkerHintGeneratorILLinkerPath)"
			TrimmerRootDescriptor="@(TrimmerRootDescriptor)"
			TargetFramework="$(TargetFramework)"
			TargetFrameworkVersion="$(TargetFrameworkVersion.Substring(1))"
			UnoUIPackageBasePath="$(_UnoUIPackageBasePath)"
			UnoRuntimeIdentifier="$(UnoRuntimeIdentifier)">
			<Output TaskParameter="OutputFeatures"
					 ItemName="_LinkerHintOutputFeatures" />
		</LinkerHintGeneratorTask_v0>

		<ItemGroup>
			<RuntimeHostConfigurationOption Include="@(_LinkerHintOutputFeatures)" Trim="true" />
		</ItemGroup>
	</Target>

	<Target Name="_UnoLinkerAndroidUITestSupport"
			Condition="'$(IsUnoHead)'=='true' and '$(TargetPlatformIdentifier)'=='android' and '$(IsUiAutomationMappingEnabled)'!='true'"
			BeforeTargets="PrepareForILLink">

		<ItemGroup>
			<RuntimeHostConfigurationOption Include="AndroidUITestSupport" Value="false" Trim="true" />
		</ItemGroup>

		<PropertyGroup>
			<_ExtraTrimmerArgs>--link-attributes "$(MSBuildThisFileDirectory)Descriptors/Uno.UI.LinkAttributes.Android.xml" $(_ExtraTrimmerArgs)</_ExtraTrimmerArgs>
		</PropertyGroup>

	</Target>

	<Target Name="_ValidateBootstraperVersion"
			BeforeTargets="BeforeBuild"
			Condition="'$(IsUnoHead)'=='true' and '$(UnoXamlResourcesTrimming)'=='true'">
		<ItemGroup>
			<_UnoWasmBootstrapVersion Include="@(PackageReference->'%(Version)')"
									  Condition="'%(Identity)'=='Uno.Wasm.Bootstrap'"/>
		</ItemGroup>
		<PropertyGroup>
			<_UnoWasmBootstrapVersionString>@(_UnoWasmBootstrapVersion)</_UnoWasmBootstrapVersionString>
		</PropertyGroup>

		<Error Text="UnoXamlResourcesTrimming cannot be used with the current Uno.Wasm.Bootstrap package version (Found $(_UnoWasmBootstrapVersionString), 3.0 or later is needed)"
			   Condition="'$(_UnoWasmBootstrapVersionString)'!='' and '$(_UnoWasmBootstrapVersionString.Split(`-`)[0])'&lt;'3.0'"/>
	</Target>

	<!--
    Warn when the task is executed in devenv.exe: https://github.com/dotnet/project-system/issues/4494
    -->

	<UsingTask
  TaskName="CheckForDevenv"
  TaskFactory="CodeTaskFactory"
  AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
		<ParameterGroup />
		<Task>
			<Reference Include="System.Xml"/>
			<Using Namespace="System"/>
			<Using Namespace="System.IO"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[  
            if (System.Diagnostics.Process.GetCurrentProcess().ProcessName.Equals("devenv", System.StringComparison.OrdinalIgnoreCase))
            {
              Log.LogWarning("The Uno.UI.Tasks build task is running under devenv.exe you will have to restart Visual Studio to rebuild it.");
            }
          ]]>
			</Code>
		</Task>
	</UsingTask>

</Project>
